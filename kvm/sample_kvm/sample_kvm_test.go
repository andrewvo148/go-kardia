package sample_kvm

import (
	"math/big"
	"strings"
	"testing"

	"github.com/kardiachain/go-kardia/kai/state"
	kaidb "github.com/kardiachain/go-kardia/kai/storage"
	"github.com/kardiachain/go-kardia/kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
)

func TestDefaults(t *testing.T) {
	cfg := new(Config)
	setDefaults(cfg)

	if cfg.Time == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GasLimit == 0 {
		t.Error("didn't expect gaslimit to be zero")
	}
	if cfg.GasPrice == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.Value == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.GetHashFn == nil {
		t.Error("expected time to be non nil")
	}
	if cfg.BlockHeight != 0 {
		t.Error("expected block number to be 0")
	}
}

func TestKVM(t *testing.T) {
	defer func() {
		if r := recover(); r != nil {
			t.Fatalf("crashed with: %v", r)
		}
	}()

	Execute([]byte{
		byte(kvm.TIMESTAMP),
		byte(kvm.GASLIMIT),
		byte(kvm.PUSH1),
		byte(kvm.ORIGIN),
		byte(kvm.BLOCKHASH),
		byte(kvm.COINBASE),
	}, nil, nil)
}

func TestExecute(t *testing.T) {
	ret, _, err := Execute([]byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	}, nil, nil)
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

func TestCall(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, []byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	})

	ret, _, err := Call(address, nil, &Config{State: state})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
}

// Simple counter smart contract to be used for below tests:
/*
- counter.sol:
	pragma solidity ^0.4.24;
	contract Counter {
    	uint8 count;
    	function set(uint8 x) public {
        	count = x;
    	}
    	function get() public view returns (uint8) {
        	return count;
    	}
	}

- compiler: remix: 0.4.24+commit.e67f0147.Emscripten.clang
*/

// Test creating a simple smart contract on KVM.
// Note: Create uses the raw bytecode as generated from compiler
func TestCreateSimpleCounterSmc(t *testing.T) {
	// Add bytecode for counter.sol to create the smc:
	var input = common.Hex2Bytes("608060405234801561001057600080fd5b5060da8061001f6000396000f30060806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324b8ba5f8114604d5780636d4ce63c146067575b600080fd5b348015605857600080fd5b50606560ff60043516608f565b005b348015607257600080fd5b50607960a5565b6040805160ff9092168252519081900360200190f35b6000805460ff191660ff92909216919091179055565b60005460ff16905600a165627a7a723058206cc1a54f543612d04d3f16b0bbb49e9ded9ccf6d47f7789fe3577260346ed44d0029")
	_, _, _, err := Create(input, nil)
	if err != nil {
		t.Fatal(err)
	}
}

// Test executing the counter smart contract on KVM
// Note: Call uses the runtime_bytecode from the compiler, unlike the raw bytecode as in the previous unit test
func TestCallSimpleCounterSmc(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")

	// Add runtime_bytecode for counter.sol to execute the smc:
	var code = common.Hex2Bytes("60806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166324b8ba5f8114604d5780636d4ce63c146067575b600080fd5b348015605857600080fd5b50606560ff60043516608f565b005b348015607257600080fd5b50607960a5565b6040805160ff9092168252519081900360200190f35b6000805460ff191660ff92909216919091179055565b60005460ff16905600a165627a7a723058206cc1a54f543612d04d3f16b0bbb49e9ded9ccf6d47f7789fe3577260346ed44d0029")
	state.SetCode(address, code)
	var definition = `[
		{"constant":false,"inputs":[{"name":"x","type":"uint8"}],"name":"set","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},
		{"constant":true,"inputs":[],"name":"get","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"}
	]`

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	// Sets counter to 5
	set, err := abi.Pack("set", uint8(5))
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = Call(address, set, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	// Gets counter and verifies it is 5
	get, err := abi.Pack("get")
	if err != nil {
		t.Fatal(err)
	}
	result, _, err := Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num := new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(5)) != 0 {
		t.Error("Expected 5, got", num)
	}
}

func TestChangeBalance(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	var address = common.HexToAddress("0x0b")
	state.CreateAccount(address)
	state.AddBalance(address, big.NewInt(500))

	var balance = state.GetBalance(address)
	if balance.Cmp(big.NewInt(500)) != 0 {
		t.Error("error setting balance, expect 500, got", balance)
	}

	state.SubBalance(address, big.NewInt(100))
	balance = state.GetBalance(address)
	if balance.Cmp(big.NewInt(400)) != 0 {
		t.Error("error subtract balance, expect 400, got", balance)
	}
}

func TestCallSmcDeductBalance(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	var sender = common.HexToAddress("0x0b")
	state.CreateAccount(sender)
	state.AddBalance(sender, big.NewInt(500))

	address := common.HexToAddress("0x0a")

	state.SetCode(address, []byte{
		byte(kvm.PUSH1), 10,
		byte(kvm.PUSH1), 0,
		byte(kvm.MSTORE),
		byte(kvm.PUSH1), 32,
		byte(kvm.PUSH1), 0,
		byte(kvm.RETURN),
	})
	ret, _, err := Call(address, nil, &Config{State: state, Origin: sender, Value: big.NewInt(50)})
	if err != nil {
		t.Fatal("didn't expect error", err)
	}

	num := new(big.Int).SetBytes(ret)
	if num.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expected 10, got", num)
	}
	var sender_balance = state.GetBalance(sender)
	if sender_balance.Cmp(big.NewInt(450)) != 0 {
		t.Error("Invalid remaining balance, expect 450, got", sender_balance)
	}
	var contract_balance = state.GetBalance(address)
	if contract_balance.Cmp(big.NewInt(50)) != 0 {
		t.Error("Invalid contract balance, expect 50, got", contract_balance)
	}
}

// Simple voting smart contract to be used for below tests:
/*
- ballot.sol:
	pragma solidity ^0.4.0;
	contract Ballot {

		struct Voter {
			bool voted;
			uint8 vote;
		}
		struct Proposal {
			uint voteCount;
		}

		mapping(address => Voter) voters;
		Proposal[4] proposals;

		/// Give a single vote to proposal $(toProposal).
		function vote(uint8 toProposal) public {
			Voter storage sender = voters[msg.sender];
			if (sender.voted || toProposal >= proposals.length) return;
			sender.voted = true;
			sender.vote = toProposal;
			proposals[toProposal].voteCount += 1;
		}

		function getVote(uint8 toProposal) public view returns (uint) {
			if (toProposal >= proposals.length) return 0;
			return proposals[toProposal].voteCount;
		}

		function winningProposal() public view returns (uint8 _winningProposal) {
			uint256 winningVoteCount = 0;
			for (uint8 prop = 0; prop < proposals.length; prop++)
				if (proposals[prop].voteCount > winningVoteCount) {
					winningVoteCount = proposals[prop].voteCount;
					_winningProposal = prop;
				}
		}
	}

- compiler: remix: 0.4.24+commit.e67f0147.Emscripten.clang
*/

// Test executing the voting smart contract on KVM
// Note: Call uses the runtime_bytecode from the compiler, unlike the raw bytecode as in the previous unit test
func TestExecuteVoteSmc(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")

	// Add runtime_bytecode for ballot.sol to execute the smc:
	var code = common.Hex2Bytes("608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063124474a71461005c578063609ff1bd146100a0578063b3f98adc146100d1575b600080fd5b34801561006857600080fd5b5061008a600480360381019080803560ff169060200190929190505050610101565b6040518082815260200191505060405180910390f35b3480156100ac57600080fd5b506100b5610138565b604051808260ff1660ff16815260200191505060405180910390f35b3480156100dd57600080fd5b506100ff600480360381019080803560ff16906020019092919050505061019e565b005b600060048260ff161015156101195760009050610133565b60018260ff1660048110151561012b57fe5b016000015490505b919050565b6000806000809150600090505b60048160ff161015610199578160018260ff1660048110151561016457fe5b0160000154111561018c5760018160ff1660048110151561018157fe5b016000015491508092505b8080600101915050610145565b505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1680610201575060048260ff1610155b1561020b5761026a565b60018160000160006101000a81548160ff021916908315150217905550818160000160016101000a81548160ff021916908360ff1602179055506001808360ff1660048110151561025857fe5b01600001600082825401925050819055505b50505600a165627a7a72305820c93a970449b32fe53b59e0ed7cfeda5d52acafd2d1bdd3f2f67093f076acf1c60029")
	state.SetCode(address, code)
	var definition = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "toProposal",
				"type": "uint8"
			}
		],
		"name": "getVote",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "winningProposal",
		"outputs": [
			{
				"name": "_winningProposal",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "toProposal",
				"type": "uint8"
			}
		],
		"name": "vote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
]`

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	//get init winning proposal
	get, err := abi.Pack("winningProposal")
	if err != nil {
		t.Fatal(err)
	}
	result, _, err := Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num := new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expected 0, got", num)
	}
	vote, err := abi.Pack("vote", uint8(1))
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, vote, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	result, _, err = Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num = new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expected 1, got", num)
	}
}

// Test executing the voting smart contract on KVM using different senders
// Note: Call uses the runtime_bytecode from the compiler, unlike the raw bytecode as in the previous unit test
func TestExecuteVoteSmcMultipleTime(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")

	// Add runtime_bytecode for ballot.sol to execute the smc:
	var code = common.Hex2Bytes("608060405260043610610057576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063124474a71461005c578063609ff1bd146100a0578063b3f98adc146100d1575b600080fd5b34801561006857600080fd5b5061008a600480360381019080803560ff169060200190929190505050610101565b6040518082815260200191505060405180910390f35b3480156100ac57600080fd5b506100b5610138565b604051808260ff1660ff16815260200191505060405180910390f35b3480156100dd57600080fd5b506100ff600480360381019080803560ff16906020019092919050505061019e565b005b600060048260ff161015156101195760009050610133565b60018260ff1660048110151561012b57fe5b016000015490505b919050565b6000806000809150600090505b60048160ff161015610199578160018260ff1660048110151561016457fe5b0160000154111561018c5760018160ff1660048110151561018157fe5b016000015491508092505b8080600101915050610145565b505090565b60008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508060000160009054906101000a900460ff1680610201575060048260ff1610155b1561020b5761026a565b60018160000160006101000a81548160ff021916908315150217905550818160000160016101000a81548160ff021916908360ff1602179055506001808360ff1660048110151561025857fe5b01600001600082825401925050819055505b50505600a165627a7a72305820c93a970449b32fe53b59e0ed7cfeda5d52acafd2d1bdd3f2f67093f076acf1c60029")
	state.SetCode(address, code)
	var definition = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "toProposal",
				"type": "uint8"
			}
		],
		"name": "getVote",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [],
		"name": "winningProposal",
		"outputs": [
			{
				"name": "_winningProposal",
				"type": "uint8"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "toProposal",
				"type": "uint8"
			}
		],
		"name": "vote",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	}
]`

	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	//get init winning proposal, should be 0
	get, err := abi.Pack("winningProposal")
	if err != nil {
		t.Fatal(err)
	}
	result, _, err := Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num := new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expected 0, got", num)
	}
	//create first vote for second candidate , should be successful
	vote, err := abi.Pack("vote", uint8(1))
	if err != nil {
		t.Fatal(err)
	}
	var sender1 = common.HexToAddress("0x0b")
	state.CreateAccount(sender1)
	state.AddBalance(sender1, big.NewInt(500))
	result, _, err = Call(address, vote, &Config{State: state, Origin: sender1})
	if err != nil {
		t.Fatal(err)
	}

	// now we get count of second candidate , should be 1
	getProposal, err := abi.Pack("getVote", uint8(1))
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, getProposal, &Config{State: state, Origin: sender1})

	num = new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expected 1, got", num)
	}
	//create duplicate vote for 2nd candidate , should be no error
	vote, err = abi.Pack("vote", uint8(1))
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, vote, &Config{State: state, Origin: sender1})
	if err != nil {
		t.Fatal(err)
	}

	// now we get vote count of candidate 2th, should be 1 because latter vote was invalid
	getProposal, err = abi.Pack("getVote", uint8(1))
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, getProposal, &Config{State: state})

	num = new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expected 1, got", num)
	}

	// now we create 2 another accounts to vote for 3rd candidate
	var sender2 = common.HexToAddress("0x0c")
	state.CreateAccount(sender2)
	state.AddBalance(sender2, big.NewInt(500))
	var sender3 = common.HexToAddress("0x0d")
	state.CreateAccount(sender3)
	state.AddBalance(sender3, big.NewInt(500))
	vote, err = abi.Pack("vote", uint8(2))
	result, _, err = Call(address, vote, &Config{State: state, Origin: sender2})
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, vote, &Config{State: state, Origin: sender3})
	if err != nil {
		t.Fatal(err)
	}
	// now we get the winning candidate, it shoud be 3rd candidate
	result, _, err = Call(address, get, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	num = new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expected 2, got", num)
	}
	// get num of vote of 3rd candidate, should be 2 votes
	getProposal, err = abi.Pack("getVote", uint8(2))
	if err != nil {
		t.Fatal(err)
	}
	result, _, err = Call(address, getProposal, &Config{State: state})

	num = new(big.Int).SetBytes(result)
	if num.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expected 2, got", num)
	}
}

// Test behaviour of master exchange contract to exchange ETH <-> NEO
// Please find solidity source code in smc/Exchange.sol
func TestExecuteMasterExchangeContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")

	// Add runtime_bytecode for Exchange.sol to execute the smc:
	var code = common.Hex2Bytes("6080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416630a0306b1811461007c578063323a9243146100a357806344af18e8146100bd5780636e63987d146100d557806386dca334146100ed578063fa8513de14610105575b600080fd5b34801561008857600080fd5b5061009161011a565b60408051918252519081900360200190f35b3480156100af57600080fd5b506100bb600435610139565b005b3480156100c957600080fd5b506100bb600435610154565b3480156100e157600080fd5b506100bb60043561016f565b3480156100f957600080fd5b506100bb60043561017a565b34801561011157600080fd5b50610091610185565b600060015460005411156101315750600154610136565b506000545b90565b60015481111561014857600080fd5b60018054919091039055565b60005481111561016357600080fd5b60008054919091039055565b600180549091019055565b600080549091019055565b60008054600154111561019b5750600054610136565b50600154905600a165627a7a72305820f07bf8b0278729f61585fdeb608ea6ab12a34ae7871ea92bfd2f4199cc5bfd0d0029")
	state.SetCode(address, code)
	var definition = `[
						{"constant": false,"inputs": [{"name": "eth","type": "uint256"}],"name": "matchEth","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},
						{"constant": false,"inputs": [{"name": "neo","type": "uint256"}],"name": "matchNeo","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},
						{"constant": false,"inputs": [{"name": "eth","type": "uint256"}],"name": "removeEth","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},
						{"constant": false,"inputs": [{"name": "neo","type": "uint256"}],"name": "removeNeo","outputs": [],"payable": false,"stateMutability": "nonpayable","type": "function"},
						{"constant": true,"inputs": [],"name": "getEthToSend","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},
						{"constant": true,"inputs": [],"name": "getNeoToSend","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"}
					]`
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	// Deposit 10 ETH to exchange for 10 NEO
	matchEthInput, err := abi.Pack("matchEth", big.NewInt(10))
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = Call(address, matchEthInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	// Deposit 5 NEO to exchange for 5 ETH
	matchNeoInput, err := abi.Pack("matchNeo", big.NewInt(5))
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = Call(address, matchNeoInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	// Get number of matching ETH quantity
	getEthInput, err := abi.Pack("getEthToSend")
	result, _, err := Call(address, getEthInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	var ethAmount = new(big.Int).SetBytes(result)
	if ethAmount.Cmp(big.NewInt(5)) != 0 {
		t.Error("Expected 5, got", ethAmount)
	}

	// Assume ETH has been release successfully, update the order list
	removeEthInput, err := abi.Pack("removeEth", big.NewInt(5))
	_, _, err = Call(address, removeEthInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	removeNeoInput, err := abi.Pack("removeNeo", big.NewInt(5))
	_, _, err = Call(address, removeNeoInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	// Get number of matching ETH quantity again, it should be 0 because no more NEO order is match
	getEthInput, err = abi.Pack("getEthToSend")
	result, _, err = Call(address, getEthInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	ethAmount = new(big.Int).SetBytes(result)
	if ethAmount.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expected 0, got", ethAmount)
	}
}

// Test call a contract from inside another contract
// The source code of 2 contracts are in smc/intersmc.
// Contract A is callee, B is caller
func TestExecuteInterContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	addressA := common.HexToAddress("0x0a")
	addressB := common.HexToAddress("0x0b")
	// Add runtime_bytecode
	// Contract B
	var codeA = common.Hex2Bytes("60806040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166373d4a13a8114604d578063da358a3c146071575b600080fd5b348015605857600080fd5b50605f6088565b60408051918252519081900360200190f35b348015607c57600080fd5b506086600435608e565b005b60005481565b6000555600a165627a7a72305820408349f58cb50ba37a5c1f89b5c4dacc1077449c09ab590360ea2866dcbc0a460029")
	state.SetCode(addressA, codeA)
	var definitionA = `[{"constant":true,"inputs":[],"name":"data","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_data","type":"int256"}],"name":"setData","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]`

	abiA, errParseA := abi.JSON(strings.NewReader(definitionA))
	if errParseA != nil {
		t.Fatal(errParseA)
	}
	// Contract B
	var codeB = common.Hex2Bytes("60806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635adc75af8114610050578063d32fe93414610077575b600080fd5b34801561005c57600080fd5b506100656100aa565b60408051918252519081900360200190f35b34801561008357600080fd5b506100a873ffffffffffffffffffffffffffffffffffffffff600435166024356100b0565b005b60005481565b60008290508073ffffffffffffffffffffffffffffffffffffffff1663da358a3c836040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040180828152602001915050600060405180830381600087803b15801561012457600080fd5b505af1158015610138573d6000803e3d6000fd5b5050506000929092555050505600a165627a7a723058205824e91fcb7a1f7034282bc72a1641ff48abe2e8a99e0ef68c941da88fdc21a30029")
	state.SetCode(addressB, codeB)
	var definitionB = `[{"constant":true,"inputs":[],"name":"datab","outputs":[{"name":"","type":"int256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"aAddr","type":"address"},{"name":"_data","type":"int256"}],"name":"testData","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"}]`
	abiB, errParseB := abi.JSON(strings.NewReader(definitionB))
	if errParseB != nil {
		t.Fatal(errParseB)
	}

	// Add default data to A to be 100
	setData, errPackSetData := abiA.Pack("setData", big.NewInt(100))
	if errPackSetData != nil {
		t.Fatal(errPackSetData)
	}
	_, _, errCallSetData := Call(addressA, setData, &Config{State: state})
	if errCallSetData != nil {
		t.Error(errCallSetData)
	}

	getData, errPackGetData := abiA.Pack("data")

	if errPackGetData != nil {
		t.Fatal(errPackGetData)
	}

	rgetData, _, errCallGetData := Call(addressA, getData, &Config{State: state})
	if errCallSetData != nil {
		t.Error(errCallGetData)
	}

	getValue := new(big.Int).SetBytes(rgetData)
	// Check value of A to check whether it's 100
	if getValue.Cmp(big.NewInt(100)) != 0 {
		t.Error("Error get value, expected 100 got ", getValue)
	}

	// Try to test set Data to A from B, data is set to be 10
	testData, errTestData := abiB.Pack("testData", addressA, big.NewInt(10))
	if errTestData != nil {
		t.Fatal(errTestData)
	}

	_, _, errCallTestData := Call(addressB, testData, &Config{State: state})

	if errCallTestData != nil {
		t.Fatal(errCallTestData)
	}
	// Now we call getData from A again, to check whether it's set to 10
	rgetData2, _, errCallGetData := Call(addressA, getData, &Config{State: state})

	getValue = new(big.Int).SetBytes(rgetData2)
	if errCallGetData != nil {
		t.Fatal(errCallGetData)
	}
	// Data should be 10 after be set from B
	if getValue.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 100 got ", getValue)
	}
}

// This test contains all the test cases for interfaces of the new exchange contract
// Please find the solidity source code at go-kardia/kvm/smc/NewExchange.sol
func TestNewExchangeContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))

	address := common.HexToAddress("0x0a")

	//var code = common.Hex2Bytes("")
	var code = common.Hex2Bytes("")
	state.SetCode(address, code)
	var definition = `[
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getAvailableAmountByPair",
		"outputs": [
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getMatchableAmount",
		"outputs": [
			{
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "requestID",
				"type": "uint256"
			}
		],
		"name": "getUncompletedMatchingRequest",
		"outputs": [
			{
				"name": "matchedRequestID",
				"type": "uint256"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getRatePublic",
		"outputs": [
			{
				"name": "sale",
				"type": "uint256"
			},
			{
				"name": "receive",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "sale_amount",
				"type": "uint256"
			},
			{
				"name": "receiveAmount",
				"type": "uint256"
			}
		],
		"name": "addRate",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "requestID",
				"type": "uint256"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "completeRequest",
		"outputs": [
			{
				"name": "success",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "sourcePair",
				"type": "string"
			},
			{
				"name": "interestedPair",
				"type": "string"
			},
			{
				"name": "fromAddress",
				"type": "string"
			},
			{
				"name": "toAddress",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "getMatchingRequestInfo",
		"outputs": [
			{
				"name": "matchedRequestID",
				"type": "uint256"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "srcPair",
				"type": "string"
			},
			{
				"name": "destPair",
				"type": "string"
			},
			{
				"name": "srcAddress",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "matchRequest",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "pair",
				"type": "string"
			},
			{
				"indexed": true,
				"name": "addr",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "matchRequestId",
				"type": "uint256"
			},
			{
				"indexed": false,
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "Release",
		"type": "event"
	}
]`
	abi, err := abi.JSON(strings.NewReader(definition))
	var gas uint64

	if err != nil {
		t.Fatal(err)
	}

	// Try to get non-set rate
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	rateResult, _, errCallRate := Call(address, getRateInput, &Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}
	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(0)) != 0 || rateStruct.Receive.Cmp(big.NewInt(0)) != 0 {
		t.Error("Error get value, expected 0, 0 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := Call(address, setRateInput, &Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	var decodeInput struct {
		Pair          string
		Sale_amount   *big.Int
		ReceiveAmount *big.Int
	}
	e := abi.UnpackInput(&decodeInput, "addRate", setRateInput[4:])
	if e != nil {
		t.Fatal(e)
	}
	rateResult, _, errCallRate = Call(address, getRateInput, &Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	// Call get rate for ETH-NEO again to check if we set it correctly
	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e2 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, gas, e3 = Call(address, setRateInput2, &Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}

	// Find available amount for NEO-ETH now, should be 0
	getAvailableInput, _ := abi.Pack("getAvailableAmountByPair", "NEO-ETH")
	availableResult, _, err := Call(address, getAvailableInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(0)) != 0 {
		t.Fatal("Expect available input is 0, got", big.NewInt(0).SetBytes(availableResult).String())
	}
	// Get rate for NEO-ETH
	getRateInput2, e4 := abi.Pack("getRatePublic", "NEO-ETH")
	if e4 != nil {
		t.Fatal(e4)
	}
	rateResult, _, errCallRate = Call(address, getRateInput2, &Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}

	if rateStruct.Sale.Cmp(big.NewInt(10)) != 0 || rateStruct.Receive.Cmp(big.NewInt(1)) != 0 {
		t.Error("Error get value, expected 10, 1 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Start matching 1 eth for 10 neo
	matchInput1, e5 := abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 := Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for recently added order
	getMatchingInput1, e5 := abi.Pack("getMatchingRequestInfo", "ETH-NEO", "ETH-NEO", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, gas, e6 := Call(address, getMatchingInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var decodedMatchResult struct {
		MatchedRequestID *big.Int `abi:"matchedRequestID"`
		DestAddress      string   `abi:"destAddress"`
		SendAmount       *big.Int `abi:"sendAmount"`
	}
	unpackErr := abi.Unpack(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect id 0, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "" {
		t.Error("Expect address '', got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect send amount 0, got ", decodedMatchResult.SendAmount.String())
	}

	getAvailableInput, _ = abi.Pack("getAvailableAmountByPair", "ETH-NEO")
	availableResult, _, err = Call(address, getAvailableInput, &Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(10)) != 0 {
		t.Fatal("Expect available input is 10, got", big.NewInt(0).SetBytes(availableResult).String())
	}

	// Match request sell 10 NEO for 1 ETH
	matchInput2, e5 := abi.Pack("matchRequest", "NEO-ETH", "ETH-NEO", "neosender2", "ethReceiver2", big.NewInt(10))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, _, e6 = Call(address, matchInput2, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for 1st added order
	// now should return info of 2nd order
	getMatchingInput1, e5 = abi.Pack("getMatchingRequestInfo", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = Call(address, getMatchingInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.Unpack(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect id 2, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "ethReceiver2" {
		t.Error("Expect address ethReceiver2, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect send amount 1, got ", decodedMatchResult.SendAmount.String())
	}

	// GetMatching of NEO-ETH matching from NEO side (2nd order)
	// now should return info of 2nd order itself, because it's matched
	getMatchingInput2, e5 := abi.Pack("getMatchingRequestInfo", "NEO-ETH", "NEO-ETH", "neosender2", "ethReceiver2", big.NewInt(10))
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = Call(address, getMatchingInput2, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.Unpack(&decodedMatchResult, "getMatchingRequestInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedRequestID.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect id 2, got ", decodedMatchResult.MatchedRequestID.String())
	}
	if decodedMatchResult.DestAddress != "ethReceiver2" {
		t.Error("Expect address ethReceiver2, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect send amount 1, got ", decodedMatchResult.SendAmount.String())
	}

	// complete order 1
	completeInput1, e7 := abi.Pack("completeRequest", big.NewInt(1), "ETH-NEO")
	if (e7 != nil) {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 := Call(address, completeInput1, &Config{State: state})
	if (e8 != nil ) {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}

	// complete order 2
	completeInput1, e7 = abi.Pack("completeRequest", big.NewInt(2), "NEO-ETH")
	if (e7 != nil) {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 = Call(address, completeInput1, &Config{State: state})
	if (e8 != nil ) {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}

	// Match 2 eth for 20 neo
	matchInput1, e5 = abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(2))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var matchableAmounts struct {
		Amounts		[]*big.Int	`abi:"amounts"`
	}
	// get matchable amount for NEO, should be 20 NEO
	getMatchAmountsInput, _ := abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 := Call(address, getMatchAmountsInput, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.Unpack(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect 1st matchable amount to be 1, got ", matchableAmounts.Amounts[0].String())
	}

	// Match 3 other eth for 30 neo
	matchInput1, e5 = abi.Pack("matchRequest", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", big.NewInt(3))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = Call(address, matchInput1, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6, gas)
	}

	getMatchAmountsInput, _ = abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 = Call(address, getMatchAmountsInput, &Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.Unpack(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect 1st matchable amount to be 20, got ", matchableAmounts.Amounts[0].String())
	}
	if matchableAmounts.Amounts[1].Cmp(big.NewInt(30)) != 0 {
		t.Error("Expect 2nd matchable amount to be 20, got ", matchableAmounts.Amounts[0].String())
	}
	if matchableAmounts.Amounts[2].Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect 3rd matchable amount to be 0, got ", matchableAmounts.Amounts[0].String())
	}
}

func TestExecuteMasterPermissionContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")

	var code= common.Hex2Bytes("")

	state.SetCode(address, code)
	var definition = `[
		{"constant": true,"inputs": [{"name": "_pubkey","type": "string"},{"name": "_nodeType","type": "uint256"}],
	"name": "isValidNode","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "view",
	"type": "function"},
		{"constant": true,"inputs": [{"name": "_pubkey","type": "string"}],"name": "isValidator","outputs": [{"name": "",
	"type": "uint256"}],"payable": false,"stateMutability": "view","type": "function"},
		{"constant": true,"inputs": [{"name": "_pubkey","type": "string"}],"name": "getNodeInfo","outputs": [{"name": "addr",
	"type": "address"},{"name": "votingPower","type": "uint256"},{"name": "nodeType","type": "uint256"}, {"name": "listenAddress","type": "string"}],"payable": false,"stateMutability": "view","type": "function"},
		{"constant": false,"inputs": [{"name": "_pubkey","type": "string"},{"name": "_addr","type": "address"},{"name": "_nodeType",
	"type": "uint256"},{"name": "_votingPower","type": "uint256"},{"name": "listenAddress","type": "string"}],"name": "addNode","outputs": [{"name": "","type": "uint256"}],
	"payable": false,"stateMutability": "nonpayable","type": "function"},
		{"constant": false,"inputs": [{"name": "_pubkey","type": "string"},{"name": "_nodeType","type": "uint256"}],
	"name": "removeNode","outputs": [{"name": "","type": "uint256"}],"payable": false,"stateMutability": "nonpayable","type": "function"
	}
]`
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	addNodeInput, err := abi.Pack("addNode", "abcdefxyz",
		common.HexToAddress("0x00009"), big.NewInt(2), big.NewInt(0), "[::]:3009")
	// Add node from non-owner account, should return error
	addNodeResult, _, err := Call(address, addNodeInput, &Config{State: state, Origin: common.HexToAddress("0xaa")})
	if err == nil {
		t.Error("Added from non owner, expect error but nil returned")
	}
	// Add node from owner account
	addNodeResult, _, err = Call(address, addNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	if err != nil {
		t.Fatal(err)
	}
	result := big.NewInt(0).SetBytes(addNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect add node from owner returns 1, got", result.String())
	}
	// Verify newly added node type
	getNodeInput, err := abi.Pack("getNodeInfo", "abcdefxyz")
	if err != nil {
		t.Fatal(err)
	}
	getNodeResult, _, err := Call(address, getNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	var nodeInfo struct {
		Addr common.Address
		VotingPower *big.Int
		NodeType *big.Int
		ListenAddress string
	}

	err = abi.Unpack(&nodeInfo, "getNodeInfo", getNodeResult)
	if err != nil {
		t.Fatal(err)
	}
	if nodeInfo.Addr != common.HexToAddress("0x00009") {
		t.Error("Expect address 0x00009, got", nodeInfo.Addr.String())
	}
	if nodeInfo.VotingPower.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect voting power 0, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.NodeType.Cmp(big.NewInt(2)) != 0 {
		t.Error("Expect node type 2, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.ListenAddress != "[::]:3009" {
		t.Error("Expect node listen address [::]:3009, got", nodeInfo.ListenAddress)
	}
	// Test if newly added node is valid
	getValidNodeInput, err := abi.Pack("isValidNode", "abcdefxyz",
		big.NewInt(2))
	if err != nil {
		t.Fatal(err)
	}
	getValidNodeResult, _, err := Call(address, getValidNodeInput, &Config{State: state})
	result = big.NewInt(0).SetBytes(getValidNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidNode return 1, got", result.String())
	}

	// Test if an arbitrary node is valid
	getValidNodeInput, err = abi.Pack("isValidNode", "abcxyz",
		big.NewInt(2))
	if err != nil {
		t.Fatal(err)
	}
	getValidNodeResult, _, err = Call(address, getValidNodeInput, &Config{State: state})
	result = big.NewInt(0).SetBytes(getValidNodeResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect isValidNode return 0, got", result.String())
	}

	// Test if initial validator is correct
	getValidatorInput, err := abi.Pack("isValidator", "7a86e2b7628c76fcae76a8b37025cba698a289a44102c5c021594b5c9fce33072ee7ef992f5e018dc44b98fa11fec53824d79015747e8ac474f4ee15b7fbe860")
	getValidatorResult, _, err := Call(address, getValidatorInput, &Config{State: state})
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidator return 1, got", result.String())
	}

	// Test if arbitrary key is regconized as initial validator
	getValidatorInput, err = abi.Pack("isValidator", "arbitrarypubkey")
	getValidatorResult, _, err = Call(address, getValidatorInput, &Config{State: state})
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect isValidator return 0, got", result.String())
	}

	// Test remove node with non-owner user
	removeNodeInput, err := abi.Pack("removeNode", "abcdefxyz", big.NewInt(2))
	// remove node called by non-owner user, should return error
	_, _, err = Call(address, removeNodeInput, &Config{State: state, Origin: common.HexToAddress("0xaa")})
	if err == nil {
		t.Error("Remove from non owner, expect error but nil returned")
	}

	// Test remove with owner user, remove an initial node, should return error
	removeNodeInput, err = abi.Pack("removeNode", "7a86e2b7628c76fcae76a8b37025cba698a289a44102c5c021594b5c9fce33072ee7ef992f5e018dc44b98fa11fec53824d79015747e8ac474f4ee15b7fbe860", big.NewInt(1))
	removeResult, _, err := Call(address, removeNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	result = big.NewInt(0).SetBytes(removeResult)
	if result.Cmp(big.NewInt(0)) != 0 {
		t.Error("Remove initial account should return 0 but got", result.String())
	}

	// Remove newly added node with owner user, should success
	removeNodeInput, err = abi.Pack("removeNode", "abcdefxyz", big.NewInt(2))
	removeResult, _, err = Call(address, removeNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	result = big.NewInt(0).SetBytes(removeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Remove newly added account should return 1 but got", result.String())
	}

	// Get NodeInfo of removed node
	getNodeResult, _, err = Call(address, getNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	err = abi.Unpack(&nodeInfo, "getNodeInfo", getNodeResult)
	if err != nil {
		t.Fatal(err)
	}
	if nodeInfo.Addr != common.HexToAddress("0x") {
		t.Error("Expect address 0x, got", nodeInfo.Addr.String())
	}
	if nodeInfo.VotingPower.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect voting power 0, got", nodeInfo.VotingPower.String())
	}
	if nodeInfo.NodeType.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect node type 0, got", nodeInfo.VotingPower.String())
	}

	if nodeInfo.ListenAddress != "" {
		t.Error("Expect node listen address empty, got", nodeInfo.ListenAddress)
	}

	// Add new validator from owner account
	addNodeInput, err = abi.Pack("addNode", "abcdefxyz",
		common.HexToAddress("0x00009"), big.NewInt(1), big.NewInt(100), "[::]:3009")
	addNodeResult, _, err = Call(address, addNodeInput, &Config{State: state, Origin: common.HexToAddress("0xc1fe56E3F58D3244F606306611a5d10c8333f1f6")})
	if err != nil {
		t.Fatal(err)
	}
	result = big.NewInt(0).SetBytes(addNodeResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect add node from owner returns 1, got", result.String())
	}

	// Test if newly added node is validator
	getValidatorInput, err = abi.Pack("isValidator", "abcdefxyz")
	getValidatorResult, _, err = Call(address, getValidatorInput, &Config{State: state})
	result = big.NewInt(0).SetBytes(getValidatorResult)
	if result.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect isValidator return 1, got", result.String())
	}
}
