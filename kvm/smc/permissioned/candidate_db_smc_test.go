/*
 *  Copyright 2018 KardiaChain
 *  This file is part of the go-kardia library.
 *
 *  The go-kardia library is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Lesser General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The go-kardia library is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 *  GNU Lesser General Public License for more details.
 *
 *  You should have received a copy of the GNU Lesser General Public License
 *  along with the go-kardia library. If not, see <http://www.gnu.org/licenses/>.
 */

 package kvm

import (
	"strings"
	"testing"

	"encoding/hex"
	"github.com/kardiachain/go-kardia/kai/state"
	kaidb "github.com/kardiachain/go-kardia/kai/storage"
	"github.com/kardiachain/go-kardia/kvm"
	"github.com/kardiachain/go-kardia/kvm/sample_kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/crypto"
	"github.com/kardiachain/go-kardia/lib/log"
	"github.com/kardiachain/go-kardia/mainchain/blockchain"
	"github.com/kardiachain/go-kardia/mainchain/genesis"
	"github.com/kardiachain/go-kardia/tool"
	"github.com/kardiachain/go-kardia/types"
	"math"
	"math/big"
	"time"
	"github.com/kardiachain/go-kardia/kai/base"
)

var code = common.Hex2Bytes("608060405260043610610062576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631a83260c146100675780634aba9bb11461015c578063945f24671461027e578063b61add9a146103a0575b600080fd5b34801561007357600080fd5b5061015a600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061059f565b005b34801561016857600080fd5b5061027c600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061071a565b005b34801561028a57600080fd5b5061039e600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803560ff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506108ed565b005b3480156103ac57600080fd5b50610407600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050610ac0565b6040518080602001806020018781526020018673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001851515151581526020018060200184810384528a818151815260200191508051906020019080838360005b83811015610491578082015181840152602081019050610476565b50505050905090810190601f1680156104be5780820380516001836020036101000a031916815260200191505b50848103835289818151815260200191508051906020019080838360005b838110156104f75780820151818401526020810190506104dc565b50505050905090810190601f1680156105245780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b8381101561055d578082015181840152602081019050610542565b50505050905090810190601f16801561058a5780820380516001836020036101000a031916815260200191505b50995050505050505050505060405180910390f35b7fe2df4c83eef1ab3c88f888395f79598f4f2b295eb4701a77c0278a2027392b3f83838360405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561060b5780820151818401526020810190506105f0565b50505050905090810190601f1680156106385780820380516001836020036101000a031916815260200191505b50848103835286818151815260200191508051906020019080838360005b83811015610671578082015181840152602081019050610656565b50505050905090810190601f16801561069e5780820380516001836020036101000a031916815260200191505b50848103825285818151815260200191508051906020019080838360005b838110156106d75780820151818401526020810190506106bc565b50505050905090810190601f1680156107045780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a1505050565b610722610f58565b60e0604051908101604052808781526020018681526020018560ff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600115158152602001838152602001600115158152509050806000866040518082805190602001908083835b6020831015156107b0578051825260208201915060208101905060208303925061078b565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906107ff929190610fb3565b50602082015181600101908051906020019061081c929190610fb3565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160020160156101000a81548160ff02191690831515021790555060a08201518160030190805190602001906108c1929190610fb3565b5060c08201518160040160006101000a81548160ff021916908315150217905550905050505050505050565b6108f5610f58565b60e0604051908101604052808781526020018681526020018560ff1681526020018473ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001838152602001600115158152509050806000866040518082805190602001908083835b602083101515610983578051825260208201915060208101905060208303925061095e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008201518160000190805190602001906109d2929190610fb3565b5060208201518160010190805190602001906109ef929190610fb3565b5060408201518160020160006101000a81548160ff021916908360ff16021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060808201518160020160156101000a81548160ff02191690831515021790555060a0820151816003019080519060200190610a94929190610fb3565b5060c08201518160040160006101000a81548160ff021916908315150217905550905050505050505050565b606080600080600060606000876040518082805190602001908083835b602083101515610b025780518252602082019150602081019050602083039250610add565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060040160009054906101000a900460ff1615610efe576000876040518082805190602001908083835b602083101515610b835780518252602082019150602081019050602083039250610b5e565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001876000896040518082805190602001908083835b602083101515610bf25780518252602082019150602081019050602083039250610bcd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160009054906101000a900460ff1660008a6040518082805190602001908083835b602083101515610c6e5780518252602082019150602081019050602083039250610c49565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660008b6040518082805190602001908083835b602083101515610cfd5780518252602082019150602081019050602083039250610cd8565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060020160159054906101000a900460ff1660008c6040518082805190602001908083835b602083101515610d795780518252602082019150602081019050602083039250610d54565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600301858054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e445780601f10610e1957610100808354040283529160200191610e44565b820191906000526020600020905b815481529060010190602001808311610e2757829003601f168201915b505050505095508360ff169350808054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610ee65780601f10610ebb57610100808354040283529160200191610ee6565b820191906000526020600020905b815481529060010190602001808311610ec957829003601f168201915b50505050509050955095509550955095509550610f4f565b60008060006020604051908101604052806000815250929190602060405190810160405280600081525092919082925081915060206040519081016040528060008152509550955095509550955095505b91939550919395565b60e0604051908101604052806060815260200160608152602001600060ff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600015158152602001606081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10610ff457805160ff1916838001178555611022565b82800160010185558215611022579182015b82811115611021578251825591602001919060010190611006565b5b50905061102f9190611033565b5090565b61105591905b80821115611051576000816000905550600101611039565b5090565b905600a165627a7a723058204340a7ceedc1de1d85fe87aee06804595016e1ccf69e8abac6ed23638967cdfa0029")

var definition = `[
	{
		"constant": false,
		"inputs": [
			{
				"name": "_name",
				"type": "string"
			},
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_age",
				"type": "uint8"
			},
			{
				"name": "_addr",
				"type": "address"
			},
			{
				"name": "source",
				"type": "string"
			}
		],
		"name": "updateCandidateInfoFromExternal",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "_name",
				"type": "string"
			},
			{
				"name": "_email",
				"type": "string"
			},
			{
				"name": "_age",
				"type": "uint8"
			},
			{
				"name": "_addr",
				"type": "address"
			},
			{
				"name": "source",
				"type": "string"
			}
		],
		"name": "updateCandidateInfo",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "_email",
				"type": "string"
			}
		],
		"name": "getCandidateInfo",
		"outputs": [
			{
				"name": "name",
				"type": "string"
			},
			{
				"name": "email",
				"type": "string"
			},
			{
				"name": "age",
				"type": "uint256"
			},
			{
				"name": "addr",
				"type": "address"
			},
			{
				"name": "isExternal",
				"type": "bool"
			},
			{
				"name": "source",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "email",
				"type": "string"
			},
			{
				"name": "_fromOrgId",
				"type": "string"
			},
			{
				"name": "_toOrgId",
				"type": "string"
			}
		],
		"name": "requestCandidateInfo",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": false,
				"name": "email",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "fromOrgId",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "toOrgId",
				"type": "string"
			}
		],
		"name": "ExternalCandidateInfoRequested",
		"type": "event"
	}
]`

type CandidateInfo struct {
	Name       string
	Email      string
	Age        *big.Int
	Addr       common.Address
	IsExternal bool
	Source     string
}

// For contract of all tests in this file, please find the solidity source code at go-kardia/kvm/smc/permissioned/CandidateDB.sol

// Util function to setup abi for contract
func SetupContractAbi() (*state.StateDB, common.Address, *abi.ABI, error) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))

	address := common.HexToAddress("0x0a")

	//var code = common.Hex2Bytes("")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		return nil, common.Address{}, nil, err
	}
	return state, address, &abi, nil
}

// TestAddCandidateFromExternalChain tests interface to add a candidate to CandidateDB of private chain internally
func TestAddCandidateFromPrivateChain(t *testing.T) {
	state, address, abi, err := SetupContractAbi()
	if err != nil {
		t.Fatal(err)
	}
	// Try to get a non-existing candidate, default values should be returned
	getCandidateInput, err := abi.Pack("getCandidateInfo", "a@gmail.com")
	if err != nil {
		t.Fatal(err)
	}
	var candidateInfo CandidateInfo
	getCandidateResult, _, err := sample_kvm.Call(address, getCandidateInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&candidateInfo, "getCandidateInfo", getCandidateResult)
	if err != nil {
		t.Fatal(err)
	}
	if candidateInfo.Name != "" {
		t.Error("Expect name is empty, got ", candidateInfo.Name)
	}
	if candidateInfo.Email != "" {
		t.Error("Expect email is empty, got ", candidateInfo.Name)
	}
	if candidateInfo.Age.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect age is 0, got ", candidateInfo.Age.String())
	}
	if candidateInfo.Addr != common.HexToAddress("0x") {
		t.Error("Expect address is 0x, got ", candidateInfo.Addr.String())
	}
	if candidateInfo.IsExternal {
		t.Error("Expect isExternal is false, got true")
	}
	if candidateInfo.Source != "" {
		t.Error("Expect source is empty, got ", candidateInfo.Source)
	}
	// Add a candidate via internal private chain, should be success, isExternal should be false
	addCandidateInput, err := abi.Pack("updateCandidateInfo", "c1", "c1@gmail.com", uint8(18),
		common.HexToAddress("0xaa"), "PV1")
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = sample_kvm.Call(address, addCandidateInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	// Get Info of newly added candidate
	getCandidateInput, err = abi.Pack("getCandidateInfo", "c1@gmail.com")
	if err != nil {
		t.Fatal(err)
	}
	getCandidateResult, _, err = sample_kvm.Call(address, getCandidateInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	err = abi.Unpack(&candidateInfo, "getCandidateInfo", getCandidateResult)
	if err != nil {
		t.Fatal(err)
	}
	if candidateInfo.Name != "c1" {
		t.Error("Expect name is c1, got ", candidateInfo.Name)
	}
	if candidateInfo.Email != "c1@gmail.com" {
		t.Error("Expect email is c1@gmail.com, got ", candidateInfo.Name)
	}
	if candidateInfo.Age.Cmp(big.NewInt(18)) != 0 {
		t.Error("Expect age is 18, got ", candidateInfo.Age.String())
	}
	if candidateInfo.Addr != common.HexToAddress("0xaa") {
		t.Error("Expect address is 0xaa, got ", candidateInfo.Addr.String())
	}
	if candidateInfo.IsExternal {
		t.Error("Expect isExternal is false, got true")
	}
	if candidateInfo.Source != "PV1" {
		t.Error("Expect source is PV1, got ", candidateInfo.Source)
	}
}

// TestAddCandidateFromExternalChain tests interface to add a candidate from external chain to CandidateDB of private chain
func TestAddCandidateFromExternalChain(t *testing.T) {
	state, address, abi, err := SetupContractAbi()

	// Add a candidate via external private chain, should be success, isExternal should be false
	addCandidateInput, err := abi.Pack("updateCandidateInfoFromExternal", "c2", "c2@gmail.com", uint8(20),
		common.HexToAddress("0xa1"), "PV2")
	if err != nil {
		t.Fatal(err)
	}
	_, _, err = sample_kvm.Call(address, addCandidateInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	// Get Info of newly added candidate, isExternal should be true
	getCandidateInput, err := abi.Pack("getCandidateInfo", "c2@gmail.com")
	if err != nil {
		t.Fatal(err)
	}
	getCandidateResult, _, err := sample_kvm.Call(address, getCandidateInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}
	var candidateInfo CandidateInfo
	err = abi.Unpack(&candidateInfo, "getCandidateInfo", getCandidateResult)
	if err != nil {
		t.Fatal(err)
	}
	if candidateInfo.Name != "c2" {
		t.Error("Expect name is c2, got ", candidateInfo.Name)
	}
	if candidateInfo.Email != "c2@gmail.com" {
		t.Error("Expect email is c2@gmail.com, got ", candidateInfo.Name)
	}
	if candidateInfo.Age.Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect age is 20, got ", candidateInfo.Age.String())
	}
	if candidateInfo.Addr != common.HexToAddress("0xa1") {
		t.Error("Expect address is 0xa1, got ", candidateInfo.Addr.String())
	}
	if !candidateInfo.IsExternal {
		t.Error("Expect isExternal is true, got false")
	}
	if candidateInfo.Source != "PV2" {
		t.Error("Expect source is PV2, got ", candidateInfo.Source)
	}
}

// ApplyTransactionReturnLog applies an tx to a blockchain and returns all the logs generated from that tx
func ApplyTransactionReturnLog(bc base.BaseBlockChain, statedb *state.StateDB, tx *types.Transaction) ([]*types.Log, error) {
	var (
		usedGas = new(uint64)
		header  = &types.Header{Time: big.NewInt(time.Now().Unix()), GasLimit: 10000000}
		gp      = new(blockchain.GasPool).AddGas(10000000)
		logger  = log.New()
	)
	statedb.Prepare(tx.Hash(), common.Hash{}, 1)
	receipt, _, err := blockchain.ApplyTransaction(logger, bc, gp, statedb, header, tx, usedGas, kvm.Config{})

	if err != nil {
		return nil, err
	}
	return receipt.Logs, nil
}

func SetupBlockchainForTesting() (*blockchain.BlockChain, error) {
	kaiDb := kaidb.NewMemStore()
	var genesisAccounts = map[string]int64{
		"0xc1fe56E3F58D3244F606306611a5d10c8333f1f6": int64(math.Pow10(18)),
		"0xBA30505351c17F4c818d94a990eDeD95e166474b": int64(math.Pow10(18)),
	}
	g := genesis.DefaulTestnetFullGenesisBlock(genesisAccounts, map[string]string{})
	chainConfig, _, genesisErr := genesis.SetupGenesisBlock(log.New(), kaiDb, g)
	if genesisErr != nil {
		return nil, genesisErr
	}

	bc, err := blockchain.NewBlockChain(log.New(), kaiDb, chainConfig, true)
	return bc, err
}

// TestEmitEvent tests if contract emits correct event and data when there is tx requested external candidate data
func TestEmitEvent(t *testing.T) {
	// Setup blockchain for testing
	bc, err := SetupBlockchainForTesting()
	if err != nil {
		t.Fatal(err)
	}
	statedb, err := bc.State()
	if err != nil {
		t.Fatal(err)
	}
	// Setup contract code into newly generated state
	address := common.HexToAddress("0x0a")
	statedb.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	// Create tx to request candidate info from external chain
	requestCandidateInfoInput, err := abi.Pack("requestCandidateInfo", "a@gmail.com", "org1", "org2")
	if err != nil {
		t.Fatal(err)
	}
	addrKeyBytes, _ := hex.DecodeString("8843ebcb1021b00ae9a644db6617f9c6d870e5fd53624cefe374c1d2d710fd06")
	addrKey := crypto.ToECDSAUnsafe(addrKeyBytes)
	tx := tool.GenerateSmcCall(addrKey, address, requestCandidateInfoInput,
		state.ManageState(statedb))
	// Apply tx and get returned logs from that tx
	logs, err := ApplyTransactionReturnLog(bc, statedb, tx)
	if err != nil {
		t.Fatal(err)
	}
	// Check if there is event emitted from previous tx
	if len(logs) == 0 {
		t.Error("Expect length of log > 0, 0 is returned")
	}
	type ExternalCandidateInfoRequested struct {
		Email  string
		FromOrgId string
		ToOrgId string
	}
	var requestEvent ExternalCandidateInfoRequested
	err = abi.Unpack(&requestEvent, "ExternalCandidateInfoRequested", logs[0].Data)
	if err != nil {
		t.Fatal(err)
	}
	// Check if event data is emitted correctly
	if requestEvent.Email != "a@gmail.com" {
		t.Error("Expect request info for a@gmail.com, got ", requestEvent.Email)
	}
	if requestEvent.FromOrgId != "org1" {
		t.Error("Expect FromOrgId is Org1, get ", requestEvent.FromOrgId)
	}
	if requestEvent.ToOrgId != "org2" {
		t.Error("Expect ToOrgId is Org2, get ", requestEvent.ToOrgId)
	}
}
