package smc

import (
	"math/big"
	"strings"
	"testing"

	"github.com/kardiachain/go-kardia/kai/state"
	kaidb "github.com/kardiachain/go-kardia/kai/storage"
	"github.com/kardiachain/go-kardia/kvm/sample_kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
	"math"
)

// This test contains all the test cases for interfaces of the exchange V2 which allows order book and partial matching
// Please find the solidity source code at go-kardia/kvm/smc/ExchangeV2.sol
var code = common.Hex2Bytes("")
var definition = `[
	{
		"constant": false,
		"inputs": [
			{
				"name": "srcPair",
				"type": "string"
			},
			{
				"name": "destPair",
				"type": "string"
			},
			{
				"name": "srcAddress",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "matchOrder",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderBook",
		"outputs": [
			{
				"name": "orderBook",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getMatchableAmount",
		"outputs": [
			{
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getRatePublic",
		"outputs": [
			{
				"name": "sale",
				"type": "uint256"
			},
			{
				"name": "receive",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "sale_amount",
				"type": "uint256"
			},
			{
				"name": "receiveAmount",
				"type": "uint256"
			}
		],
		"name": "addRate",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "releaseTxId",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "receiveAddress",
				"type": "string"
			},
			{
				"name": "releaseAmount",
				"type": "uint256"
			}
		],
		"name": "completeOrder",
		"outputs": [
			{
				"name": "success",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getReleaseByTxId",
		"outputs": [
			{
				"name": "releaseInfos",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderHistoryByPair",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "sourcePair",
				"type": "string"
			},
			{
				"name": "fromAddress",
				"type": "string"
			},
			{
				"name": "toAddress",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "getOrderId",
		"outputs": [
			{
				"name": "",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			}
		],
		"name": "getOrderHistory",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "pair",
				"type": "string"
			},
			{
				"indexed": true,
				"name": "addr",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "matchOrderId",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "Release",
		"type": "event"
	}
]`

func TestGetOrderBook(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Now we get order list of eth - neo
	getOrderInput, e10 := abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderBook string
	}
	e12 := abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 = abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 = sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	e12 = abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0, got ", orders.OrderBook)
	}
}

func TestGetOrderHistory(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}

	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 := abi.Pack("getOrderHistoryByPair", "ethsender1", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderHistory string
	}
	e12 := abi.Unpack(&orders, "getOrderHistoryByPair", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderHistory != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0, got ", orders.OrderHistory)
	}
}

func TestGetOrderBookDuplicateTxID(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	_, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Now we get order list of eth - neo
	getOrderInput, e10 := abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderBook string
	}
	e12 := abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
	// Start matching 2 eth for 20 neo with old txid
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 = abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 = sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	e12 = abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	// Order book should return only the first order
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
}

func TestPartialMatching1(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	_, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	println("Matching 5 eth : ethtxid1")
	// Start matching 5 eth for 50 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(5))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Start matching 20 neo for 2 eth
	println("Matching 20 neo : neotxid1")
	originalNeoTxId := "neotxid1"
	matchInput1, e8 = abi.Pack("matchOrder", "NEO-ETH", "ETH-NEO", "neoSender2", "ethReceiver2", originalNeoTxId, big.NewInt(20))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e13 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e13 != nil {
		t.Fatal(e13)
	}

	// Get release info of newly added order, should have 1 release with 2 eth for NEO-ETH and 1 release with 20 neo for ETH-NEO
	getReleaseInput1, e14 := abi.Pack("getReleaseByTxId", originalNeoTxId, "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 := sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	var releases struct {
		ReleaseInfos string
	}
	e16 := abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;;20;0" {
		t.Error("Invalid release info, ethtxid1:ETH-NEO;neoReceiver1;;20;0 , got ", releases.ReleaseInfos)
	}
	println("Release info of ", originalNeoTxId, " from ETH to NEO :", releases.ReleaseInfos)
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", originalNeoTxId, "NEO-ETH")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}

	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "neotxid1:NEO-ETH;ethReceiver2;;2;0" {
		t.Error("Invalid release info, expect neotxid1:NEO-ETH;ethReceiver2;;2;0 , got ", releases.ReleaseInfos)
	}
	println("Release info of ", originalNeoTxId, " from NEO to ETH :", releases.ReleaseInfos)
	// get release info of 1st added order with direction neo-eth , should have 1 release  with 10 neo and completed to
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "ethtxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;;20;0" {
		t.Error("Invalid release info, expect ethtxid:ETH-NEO;neoReceiver1;;20;0 , got ", releases.ReleaseInfos)
	}

	// Match more 10 NEO to see what happens
	originalNeoTxId = "neotxid2"
	matchInput1, e8 = abi.Pack("matchOrder", "NEO-ETH", "ETH-NEO", "neoSender2", "ethReceiver2", originalNeoTxId, big.NewInt(10))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e13 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e13 != nil {
		t.Fatal(e13)
	}

	// We get release info of the 1st order from eth
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", originalEthTxId, "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}

	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	println("release info of ethtxid1:", releases.ReleaseInfos)
	//Complete ETH-NEO part of neotxid1
	completeInput, e17 := abi.Pack("completeOrder", "neotxid1", "releaseNeoTxId","ETH-NEO", "neoReceiver1", big.NewInt(20))
	if e17 != nil {
		t.Fatal(e17)
	}
	_, _, e18 := sample_kvm.Call(address, completeInput, &sample_kvm.Config{State: state})
	if e18 != nil {
		t.Fatal(e18)
	}
	// get release info of the order neotxid1 , should have 1 release with 20 neo and completed
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "neotxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	println(releases.ReleaseInfos)
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1" {
		t.Error("Invalid release info, expect ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1 , got ", releases.ReleaseInfos)
	}
	// get release info of 1st added order with direction neo-eth , should have 1 release  with 10 neo and completed to
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "ethtxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1|ethtxid1:ETH-NEO;neoReceiver1;;10;0" {
		t.Error("Invalid release info, expect ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1|ethtxid1:ETH-NEO;neoReceiver1;;10;0 , got ", releases.ReleaseInfos)
	}
}

func FloatToBigInt(val float64) *big.Int {
	bigval := new(big.Float)
	bigval.SetFloat64(val)
	// Set precision if required.
	// bigval.SetPrec(64)

	coin := new(big.Float)
	coin.SetInt(big.NewInt(1000000000000000000))

	bigval.Mul(bigval, coin)

	result := new(big.Int)
	bigval.Int(result) // store converted number in result

	return result
}

func TestRate(t *testing.T) {
	amountEth := 0.06482133 * 2 * math.Pow(10, 18)
	amountEthBig := big.NewInt(int64(math.Floor(amountEth)))
	rateEth := big.NewInt(100000000)
	rateNeo := big.NewInt(6482133)

	temp := big.NewInt(1)
	TenPoweredByTen := big.NewInt(1).Exp(big.NewInt(10), big.NewInt(10), nil)

	convertedAmount := temp.Mul(amountEthBig, rateEth)
	convertedAmount = temp.Div(convertedAmount, rateNeo)
	convertedAmount = temp.Div(convertedAmount, TenPoweredByTen)
	println(convertedAmount.Int64())

	amountNeo := big.NewInt(200000000)
	releasedAmount := temp.Mul(amountNeo, TenPoweredByTen)
	releasedAmount = temp.Mul(amountNeo, rateNeo)
	releasedAmount = temp.Div(releasedAmount, rateEth)
	println(releasedAmount.Int64())
}
