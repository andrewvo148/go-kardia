package smc

import (
	"math/big"
	"strings"
	"testing"

	"github.com/kardiachain/go-kardia/kai/state"
	kaidb "github.com/kardiachain/go-kardia/kai/storage"
	"github.com/kardiachain/go-kardia/kvm/sample_kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
)

// This test contains all the test cases for interfaces of the exchange V2 which allows order book and partial matching
// Please find the solidity source code at go-kardia/kvm/smc/ExchangeV2.sol


var code = common.Hex2Bytes("608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680631112f8361461009e5780631d2169621461022957806342e116351461030b5780637fb06000146103c95780638e4a24041461044d578063955982b8146104ca57806399a1523f14610623578063aab991d31461074b578063fa57983d14610873575b600080fd5b3480156100aa57600080fd5b50610227600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050610955565b005b34801561023557600080fd5b50610290600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611093565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156102d05780820151818401526020810190506102b5565b50505050905090810190601f1680156102fd5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561031757600080fd5b50610372600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611a08565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156103b557808201518184015260208101905061039a565b505050509050019250505060405180910390f35b3480156103d557600080fd5b50610430600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050611c5e565b604051808381526020018281526020019250505060405180910390f35b34801561045957600080fd5b506104c8600480360381019080803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192908035906020019092919080359060200190929190505050611d48565b005b3480156104d657600080fd5b5061060d600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929080359060200190929190505050611de4565b6040518082815260200191505060405180910390f35b34801561062f57600080fd5b506106d0600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f016020809104026020016040519081016040528093929190818152602001838380828437820191505050505050919291929050505061289d565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156107105780820151818401526020810190506106f5565b50505050905090810190601f16801561073d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561075757600080fd5b506107f8600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290803590602001908201803590602001908080601f01602080910402602001604051908101604052809392919081815260200183838082843782019150505050505091929192905050506130a2565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561083857808201518184015260208101905061081d565b50505050905090810190601f1680156108655780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b34801561087f57600080fd5b506108da600480360381019080803590602001908201803590602001908080601f0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509192919290505050613c54565b6040518080602001828103825283818151815260200191508051906020019080838360005b8381101561091a5780820151818401526020810190506108ff565b50505050905090810190601f1680156109475780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61095d6155b8565b600080600061096a6155d2565b60006109758c6145c9565b95506001886040518082805190602001908083835b6020831015156109af578051825260208201915060208101905060208303925061098a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060080160009054906101000a900460ff16156109fd57611085565b600086602001511480610a14575060008660000151145b15610a1e57611085565b856000015186602001518802811515610a3357fe5b049450610120604051908101604052808d81526020018b81526020018a815260200189815260200188815260200186815260200188815260200160008152602001600115158152509150600060028c6040518082805190602001908083835b602083101515610ab75780518252602082019150602081019050602083039250610a92565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805490501115610c8157610c4d888d8d60028f6040518082805190602001908083835b602083101515610b325780518252602082019150602081019050602083039250610b0d565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015610c41578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610c2d5780601f10610c0257610100808354040283529160200191610c2d565b820191906000526020600020905b815481529060010190602001808311610c1057829003601f168201915b505050505081526020019060010190610b85565b505050508a8a8f614662565b80945081955050506000831115610c8057856020015186600001518402811515610c7357fe5b0487038260c00181815250505b5b600090505b8380549050811015610e08576000886040518082805190602001908083835b602083101515610cca5780518252602082019150602081019050602083039250610ca5565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390208482815481101515610d0b57fe5b90600052602060002090600602019080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201816000019080546001816001161561010002031660029004610d6b929190615621565b5060018201816001019080546001816001161561010002031660029004610d93929190615621565b5060028201816002019080546001816001161561010002031660029004610dbb929190615621565b5060038201816003019080546001816001161561010002031660029004610de3929190615621565b5060048201548160040155600582015481600501555050508080600101915050610c86565b816001896040518082805190602001908083835b602083101515610e415780518252602082019150602081019050602083039250610e1c565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000019080519060200190610e909291906156a8565b506020820151816001019080519060200190610ead9291906156a8565b506040820151816002019080519060200190610eca9291906156a8565b506060820151816003019080519060200190610ee79291906156a8565b506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a81548160ff02191690831515021790555090505060028c6040518082805190602001908083835b602083101515610f6c5780518252602082019150602081019050602083039250610f47565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020889080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190610fda929190615728565b505060048a6040518082805190602001908083835b6020831015156110145780518252602082019150602081019050602083039250610fef565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020889080600181540180825580915050906001820390600052602060002001600090919290919091509080519060200190611082929190615728565b50505b505050505050505050505050565b6060806000606060006002866040518082805190602001908083835b6020831015156110d457805182526020820191506020810190506020830392506110af565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156111e3578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156111cf5780601f106111a4576101008083540402835291602001916111cf565b820191906000526020600020905b8154815290600101906020018083116111b257829003601f168201915b505050505081526020019060010190611127565b50505050935083519250600083141561120e57602060405190810160405280600081525094506119ff565b60206040519081016040528060008152509150600090505b828110156119fb5760008114156115a0576115996001858381518110151561124a57fe5b906020019060200201516040518082805190602001908083835b6020831015156112895780518252602082019150602081019050602083039250611264565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156113625780601f1061133757610100808354040283529160200191611362565b820191906000526020600020905b81548152906001019060200180831161134557829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114045780601f106113d957610100808354040283529160200191611404565b820191906000526020600020905b8154815290600101906020018083116113e757829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114a65780601f1061147b576101008083540402835291602001916114a6565b820191906000526020600020905b81548152906001019060200180831161148957829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156115485780601f1061151d57610100808354040283529160200191611548565b820191906000526020600020905b81548152906001019060200180831161152b57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b91506119ee565b81611903600186848151811015156115b457fe5b906020019060200201516040518082805190602001908083835b6020831015156115f357805182526020820191506020810190506020830392506115ce565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156116cc5780601f106116a1576101008083540402835291602001916116cc565b820191906000526020600020905b8154815290600101906020018083116116af57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561176e5780601f106117435761010080835404028352916020019161176e565b820191906000526020600020905b81548152906001019060200180831161175157829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118105780601f106117e557610100808354040283529160200191611810565b820191906000526020600020905b8154815290600101906020018083116117f357829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156118b25780601f10611887576101008083540402835291602001916118b2565b820191906000526020600020905b81548152906001019060200180831161189557829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b6040516020018083805190602001908083835b60208310151561193b5780518252602082019150602081019050602083039250611916565b6001836020036101000a038019825116818451168082178552505050505050905001807f7c0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831015156119b65780518252602082019150602081019050602083039250611991565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505b8080600101915050611226565b8194505b50505050919050565b60608060006002846040518082805190602001908083835b602083101515611a455780518252602082019150602081019050602083039250611a20565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015611b54578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611b405780601f10611b1557610100808354040283529160200191611b40565b820191906000526020600020905b815481529060010190602001808311611b2357829003601f168201915b505050505081526020019060010190611a98565b505050509150600a604051908082528060200260200182016040528015611b8a5781602001602082028038833980820191505090505b509250600090505b8151811015611c5457600a811015611c475760018282815181101515611bb457fe5b906020019060200201516040518082805190602001908083835b602083101515611bf35780518252602082019150602081019050602083039250611bce565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600501548382815181101515611c3857fe5b90602001906020020181815250505b8080600101915050611b92565b8292505050919050565b6000806003836040518082805190602001908083835b602083101515611c995780518252602082019150602081019050602083039250611c74565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001546003846040518082805190602001908083835b602083101515611d085780518252602082019150602081019050602083039250611ce3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001015491509150915091565b6040805190810160405280838152602001828152506003846040518082805190602001908083835b602083101515611d955780518252602082019150602081019050602083039250611d70565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000820151816000015560208201518160010155905050505050565b6000806000806000808a6040518082805190602001908083835b602083101515611e235780518252602082019150602081019050602083039250611dfe565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390209350600084805490501415611e6e5760009450612890565b600092505b838054905083101561288f578383815481101515611e8d57fe5b90600052602060002090600602016001016040516020018082805460018160011615610100020316600290048015611efc5780601f10611eda576101008083540402835291820191611efc565b820191906000526020600020905b815481529060010190602001808311611ee8575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515611f455780518252602082019150602081019050602083039250611f20565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916886040516020018082805190602001908083835b602083101515611faf5780518252602082019150602081019050602083039250611f8a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156120185780518252602082019150602081019050602083039250611ff3565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614801561221d5750838381548110151561205f57fe5b906000526020600020906006020160020160405160200180828054600181600116156101000203166002900480156120ce5780601f106120ac5761010080835404028352918201916120ce565b820191906000526020600020905b8154815290600101906020018083116120ba575b50509150506040516020818303038152906040526040518082805190602001908083835b60208310151561211757805182526020820191506020810190506020830392506120f2565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916876040516020018082805190602001908083835b602083101515612181578051825260208201915060208101905060208303925061215c565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156121ea57805182526020820191506020810190506020830392506121c5565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916145b80156122475750838381548110151561223257fe5b90600052602060002090600602016004015486145b156128825788848481548110151561225b57fe5b9060005260206000209060060201600301908051906020019061227f929190615728565b506001848481548110151561229057fe5b90600052602060002090600602016005018190555083838154811015156122b357fe5b906000526020600020906006020160000191506000808360405180828054600181600116156101000203166002900480156123255780601f10612303576101008083540402835291820191612325565b820191906000526020600020905b815481529060010190602001808311612311575b5050915050908152602001604051809103902080549050111561288157600090505b60008260405180828054600181600116156101000203166002900480156123a55780601f106123835761010080835404028352918201916123a5565b820191906000526020600020905b815481529060010190602001808311612391575b505091505090815260200160405180910390208054905081101561288057866040516020018082805190602001908083835b6020831015156123fc57805182526020820191506020810190506020830392506123d7565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156124655780518252602082019150602081019050602083039250612440565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191660008360405180828054600181600116156101000203166002900480156124f45780601f106124d25761010080835404028352918201916124f4565b820191906000526020600020905b8154815290600101906020018083116124e0575b505091505090815260200160405180910390208281548110151561251457fe5b906000526020600020906006020160020160405160200180828054600181600116156101000203166002900480156125835780601f10612561576101008083540402835291820191612583565b820191906000526020600020905b81548152906001019060200180831161256f575b50509150506040516020818303038152906040526040518082805190602001908083835b6020831015156125cc57805182526020820191506020810190506020830392506125a7565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390206000191614801561269857508560008360405180828054600181600116156101000203166002900480156126645780601f10612642576101008083540402835291820191612664565b820191906000526020600020905b815481529060010190602001808311612650575b505091505090815260200160405180910390208281548110151561268457fe5b906000526020600020906006020160040154145b801561273257506000808360405180828054600181600116156101000203166002900480156126fe5780601f106126dc5761010080835404028352918201916126fe565b820191906000526020600020905b8154815290600101906020018083116126ea575b505091505090815260200160405180910390208281548110151561271e57fe5b906000526020600020906006020160050154145b15612873578860008360405180828054600181600116156101000203166002900480156127965780601f10612774576101008083540402835291820191612796565b820191906000526020600020905b815481529060010190602001808311612782575b5050915050908152602001604051809103902060008154811015156127b757fe5b906000526020600020906006020160030190805190602001906127db929190615728565b506001600083604051808280546001816001161561010002031660029004801561283c5780601f1061281a57610100808354040283529182019161283c565b820191906000526020600020905b815481529060010190602001808311612828575b50509150509081526020016040518091039020600081548110151561285d57fe5b9060005260206000209060060201600501819055505b8080600101915050612347565b5b5b8280600101935050611e73565b5b5050505095945050505050565b606080600080856040518082805190602001908083835b6020831015156128d957805182526020820191506020810190506020830392506128b4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015612bfb578382906000526020600020906006020160c06040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156129e95780601f106129be576101008083540402835291602001916129e9565b820191906000526020600020905b8154815290600101906020018083116129cc57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612a8b5780601f10612a6057610100808354040283529160200191612a8b565b820191906000526020600020905b815481529060010190602001808311612a6e57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612b2d5780601f10612b0257610100808354040283529160200191612b2d565b820191906000526020600020905b815481529060010190602001808311612b1057829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612bcf5780601f10612ba457610100808354040283529160200191612bcf565b820191906000526020600020905b815481529060010190602001808311612bb257829003601f168201915b50505050508152602001600482015481526020016005820154815250508152602001906001019061292c565b505050509150600082511415612c26576020604051908101604052806000815250925082925061309a565b600090505b815181101561309657836040516020018082805190602001908083835b602083101515612c6d5780518252602082019150602081019050602083039250612c48565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612cd65780518252602082019150602081019050602083039250612cb1565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019168282815181101515612d1557fe5b90602001906020020151602001516040516020018082805190602001908083835b602083101515612d5b5780518252602082019150602081019050602083039250612d36565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612dc45780518252602082019150602081019050602083039250612d9f565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415613089576040516020018060000190506040516020818303038152906040526040518082805190602001908083835b602083101515612e4b5780518252602082019150602081019050602083039250612e26565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902060001916836040516020018082805190602001908083835b602083101515612eb55780518252602082019150602081019050602083039250612e90565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b602083101515612f1e5780518252602082019150602081019050602083039250612ef9565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415612f7c57612f758282815181101515612f6657fe5b90602001906020020151615147565b9250613088565b82612f9d8383815181101515612f8e57fe5b90602001906020020151615147565b6040516020018083805190602001908083835b602083101515612fd55780518252602082019150602081019050602083039250612fb0565b6001836020036101000a038019825116818451168082178552505050505050905001807f7c0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083101515613050578051825260208201915060208101905060208303925061302b565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505b5b8080600101915050612c2b565b8292505b505092915050565b606080600060606000806004886040518082805190602001908083835b6020831015156130e457805182526020820191506020810190506020830392506130bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b828210156131f3578382906000526020600020018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156131df5780601f106131b4576101008083540402835291602001916131df565b820191906000526020600020905b8154815290600101906020018083116131c257829003601f168201915b505050505081526020019060010190613137565b50505050945084519350600084141561321e5760206040519081016040528060008152509550613c49565b60206040519081016040528060008152509250866040516020018082805190602001908083835b60208310151561326a5780518252602082019150602081019050602083039250613245565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040526040518082805190602001908083835b6020831015156132d357805182526020820191506020810190506020830392506132ae565b6001836020036101000a03801982511681845116808217855250505050505090500191505060405180910390209150600090505b83811015613c455781600019166001868381518110151561332457fe5b906020019060200201516040518082805190602001908083835b602083101515613363578051825260208201915060208101905060208303925061333e565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000160405160200180828054600181600116156101000203166002900480156133f75780601f106133d55761010080835404028352918201916133f7565b820191906000526020600020905b8154815290600101906020018083116133e3575b50509150506040516020818303038152906040526040518082805190602001908083835b602083101515613440578051825260208201915060208101905060208303925061341b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040518091039020600019161415613c385760008114156137e9576137e26001868381518110151561349357fe5b906020019060200201516040518082805190602001908083835b6020831015156134d257805182526020820191506020810190506020830392506134ad565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156135ab5780601f10613580576101008083540402835291602001916135ab565b820191906000526020600020905b81548152906001019060200180831161358e57829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561364d5780601f106136225761010080835404028352916020019161364d565b820191906000526020600020905b81548152906001019060200180831161363057829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156136ef5780601f106136c4576101008083540402835291602001916136ef565b820191906000526020600020905b8154815290600101906020018083116136d257829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156137915780601f1061376657610100808354040283529160200191613791565b820191906000526020600020905b81548152906001019060200180831161377457829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b9250613c37565b82613b4c600187848151811015156137fd57fe5b906020019060200201516040518082805190602001908083835b60208310151561383c5780518252602082019150602081019050602083039250613817565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139155780601f106138ea57610100808354040283529160200191613915565b820191906000526020600020905b8154815290600101906020018083116138f857829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156139b75780601f1061398c576101008083540402835291602001916139b7565b820191906000526020600020905b81548152906001019060200180831161399a57829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613a595780601f10613a2e57610100808354040283529160200191613a59565b820191906000526020600020905b815481529060010190602001808311613a3c57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613afb5780601f10613ad057610100808354040283529160200191613afb565b820191906000526020600020905b815481529060010190602001808311613ade57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b6040516020018083805190602001908083835b602083101515613b845780518252602082019150602081019050602083039250613b5f565b6001836020036101000a038019825116818451168082178552505050505050905001807f7c0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b602083101515613bff5780518252602082019150602081019050602083039250613bda565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405292505b5b8080600101915050613307565b8295505b505050505092915050565b6060806000606060006004866040518082805190602001908083835b602083101515613c955780518252602082019150602081019050602083039250613c70565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020805480602002602001604051908101604052809291908181526020016000905b82821015613da4578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d905780601f10613d6557610100808354040283529160200191613d90565b820191906000526020600020905b815481529060010190602001808311613d7357829003601f168201915b505050505081526020019060010190613ce8565b505050509350835192506000831415613dcf57602060405190810160405280600081525094506145c0565b60206040519081016040528060008152509150600090505b828110156145bc5760008114156141615761415a60018583815181101515613e0b57fe5b906020019060200201516040518082805190602001908083835b602083101515613e4a5780518252602082019150602081019050602083039250613e25565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613f235780601f10613ef857610100808354040283529160200191613f23565b820191906000526020600020905b815481529060010190602001808311613f0657829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613fc55780601f10613f9a57610100808354040283529160200191613fc5565b820191906000526020600020905b815481529060010190602001808311613fa857829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156140675780601f1061403c57610100808354040283529160200191614067565b820191906000526020600020905b81548152906001019060200180831161404a57829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156141095780601f106140de57610100808354040283529160200191614109565b820191906000526020600020905b8154815290600101906020018083116140ec57829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b91506145af565b816144c46001868481518110151561417557fe5b906020019060200201516040518082805190602001908083835b6020831015156141b4578051825260208201915060208101905060208303925061418f565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206101206040519081016040529081600082018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561428d5780601f106142625761010080835404028352916020019161428d565b820191906000526020600020905b81548152906001019060200180831161427057829003601f168201915b50505050508152602001600182018054600181600116156101000203166002900480601f01602080910402602001604051908101604052809291908181526020018280546001816001161561010002031660029004801561432f5780601f106143045761010080835404028352916020019161432f565b820191906000526020600020905b81548152906001019060200180831161431257829003601f168201915b50505050508152602001600282018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156143d15780601f106143a6576101008083540402835291602001916143d1565b820191906000526020600020905b8154815290600101906020018083116143b457829003601f168201915b50505050508152602001600382018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156144735780601f1061444857610100808354040283529160200191614473565b820191906000526020600020905b81548152906001019060200180831161445657829003601f168201915b50505050508152602001600482015481526020016005820154815260200160068201548152602001600782015481526020016008820160009054906101000a900460ff161515151581525050614ce1565b6040516020018083805190602001908083835b6020831015156144fc57805182526020820191506020810190506020830392506144d7565b6001836020036101000a038019825116818451168082178552505050505050905001807f7c0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b6020831015156145775780518252602082019150602081019050602083039250614552565b6001836020036101000a0380198251168184511680821785525050505050509050019250505060405160208183030381529060405291505b8080600101915050613de7565b8194505b50505050919050565b6145d16155b8565b6003826040518082805190602001908083835b60208310151561460957805182526020820191506020810190506020830392506145e4565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020604080519081016040529081600082015481526020016001820154815250509050919050565b6000806000806146706157a8565b600061467a6157a8565b600094505b8a518510801561468e57508886105b15614cca5760018b868151811015156146a357fe5b906020019060200201516040518082805190602001908083835b6020831015156146e257805182526020820191506020810190506020830392506146bd565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060060154891161472557886147ac565b60018b8681518110151561473557fe5b906020019060200201516040518082805190602001908083835b602083101515614774578051825260208201915060208101905060208303925061474f565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600601545b935060c0604051908101604052808f81526020018e8152602001898152602001602060405190810160405280600081525081526020018581526020016000815250925086839080600181540180825580915050906001820390600052602060002090600602016000909192909190915060008201518160000190805190602001906148389291906156a8565b5060208201518160010190805190602001906148559291906156a8565b5060408201518160020190805190602001906148729291906156a8565b50606082015181600301908051906020019061488f9291906156a8565b506080820151816004015560a0820151816005015550505089602001518a6000015185028115156148bc57fe5b0491508360018c878151811015156148d057fe5b906020019060200201516040518082805190602001908083835b60208310151561490f57805182526020820191506020810190506020830392506148ea565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206006016000828254039250508190555060c0604051908101604052808c8781518110151561496c57fe5b9060200190602002015181526020018d815260200160018d8881518110151561499157fe5b906020019060200201516040518082805190602001908083835b6020831015156149d057805182526020820191506020810190506020830392506149ab565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206002018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015614a9a5780601f10614a6f57610100808354040283529160200191614a9a565b820191906000526020600020905b815481529060010190602001808311614a7d57829003601f168201915b50505050508152602001602060405190810160405280600081525081526020018381526020016000815250905060008b86815181101515614ad757fe5b906020019060200201516040518082805190602001908083835b602083101515614b165780518252602082019150602081019050602083039250614af1565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902081908060018154018082558091505090600182039060005260206000209060060201600090919290919091506000820151816000019080519060200190614b919291906156a8565b506020820151816001019080519060200190614bae9291906156a8565b506040820151816002019080519060200190614bcb9291906156a8565b506060820151816003019080519060200190614be89291906156a8565b506080820151816004015560a082015181600501555050508681908060018154018082558091505090600182039060005260206000209060060201600090919290919091506000820151816000019080519060200190614c499291906156a8565b506020820151816001019080519060200190614c669291906156a8565b506040820151816002019080519060200190614c839291906156a8565b506060820151816003019080519060200190614ca09291906156a8565b506080820151816004015560a082015181600501555050508386019550848060010195505061467f565b868696509650505050505097509795505050505050565b6060806060806060600086610100019015159081151581525015614d17576020604051908101604052806000815250945061513e565b614d248660800151615461565b9350614d338660a00151615461565b9250614d428660e00151615461565b9150614d518660c00151615461565b90508560000151866020015187604001518860600151878786886040516020018089805190602001908083835b602083101515614da35780518252602082019150602081019050602083039250614d7e565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010188805190602001908083835b602083101515614e1e5780518252602082019150602081019050602083039250614df9565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010187805190602001908083835b602083101515614e995780518252602082019150602081019050602083039250614e74565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010186805190602001908083835b602083101515614f145780518252602082019150602081019050602083039250614eef565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b602083101515614f8f5780518252602082019150602081019050602083039250614f6a565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b60208310151561500a5780518252602082019150602081019050602083039250614fe5565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831015156150855780518252602082019150602081019050602083039250615060565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b60208310151561510057805182526020820191506020810190506020830392506150db565b6001836020036101000a0380198251168184511680821785525050505050509050019850505050505050505060405160208183030381529060405294505b50505050919050565b60608060606151598460800151615461565b91506151688460a00151615461565b9050836000015184602001518560400151866060015185856040516020018087805190602001908083835b6020831015156151b85780518252602082019150602081019050602083039250615193565b6001836020036101000a038019825116818451168082178552505050505050905001807f3a0000000000000000000000000000000000000000000000000000000000000081525060010186805190602001908083835b602083101515615233578051825260208201915060208101905060208303925061520e565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010185805190602001908083835b6020831015156152ae5780518252602082019150602081019050602083039250615289565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010184805190602001908083835b6020831015156153295780518252602082019150602081019050602083039250615304565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010183805190602001908083835b6020831015156153a4578051825260208201915060208101905060208303925061537f565b6001836020036101000a038019825116818451168082178552505050505050905001807f3b0000000000000000000000000000000000000000000000000000000000000081525060010182805190602001908083835b60208310151561541f57805182526020820191506020810190506020830392506153fa565b6001836020036101000a038019825116818451168082178552505050505050905001965050505050505060405160208183030381529060405292505050919050565b606060008060606000808614156154af576040805190810160405280600181526020017f300000000000000000000000000000000000000000000000000000000000000081525094506155af565b8593505b6000841415156154d9578280600101935050600a848115156154d157fe5b0493506154b3565b826040519080825280601f01601f19166020018201604052801561550c5781602001602082028038833980820191505090505b5091506001830390505b6000861415156155ab57600a8681151561552c57fe5b066030017f01000000000000000000000000000000000000000000000000000000000000000282828060019003935081518110151561556757fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a868115156155a357fe5b049550615516565b8194505b50505050919050565b604080519081016040528060008152602001600081525090565b6101206040519081016040528060608152602001606081526020016060815260200160608152602001600081526020016000815260200160008152602001600081526020016000151581525090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061565a5780548555615697565b8280016001018555821561569757600052602060002091601f016020900482015b8281111561569657825482559160010191906001019061567b565b5b5090506156a491906157df565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106156e957805160ff1916838001178555615717565b82800160010185558215615717579182015b828111156157165782518255916020019190600101906156fb565b5b50905061572491906157df565b5090565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061576957805160ff1916838001178555615797565b82800160010185558215615797579182015b8281111561579657825182559160200191906001019061577b565b5b5090506157a491906157df565b5090565b60c0604051908101604052806060815260200160608152602001606081526020016060815260200160008152602001600081525090565b61580191905b808211156157fd5760008160009055506001016157e5565b5090565b905600a165627a7a723058200d05c391c9ad05db3cbacc49737099b011a9c4671238c1e1de012a034b221f0a0029")
var definition = `[
	{
		"constant": false,
		"inputs": [
			{
				"name": "srcPair",
				"type": "string"
			},
			{
				"name": "destPair",
				"type": "string"
			},
			{
				"name": "srcAddress",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "matchOrder",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderBook",
		"outputs": [
			{
				"name": "orderBook",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getMatchableAmount",
		"outputs": [
			{
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getRatePublic",
		"outputs": [
			{
				"name": "sale",
				"type": "uint256"
			},
			{
				"name": "receive",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "sale_amount",
				"type": "uint256"
			},
			{
				"name": "receiveAmount",
				"type": "uint256"
			}
		],
		"name": "addRate",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "releaseTxId",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "receiveAddress",
				"type": "string"
			},
			{
				"name": "releaseAmount",
				"type": "uint256"
			}
		],
		"name": "completeOrder",
		"outputs": [
			{
				"name": "success",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getReleaseByTxId",
		"outputs": [
			{
				"name": "releaseInfos",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderHistoryByPair",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			}
		],
		"name": "getOrderHistory",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "pair",
				"type": "string"
			},
			{
				"indexed": true,
				"name": "addr",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "matchOrderId",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "Release",
		"type": "event"
	}
]`

func TestGetOrderBook(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Now we get order list of eth - neo
	getOrderInput, e10 := abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderBook string
	}
	e12 := abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 = abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 = sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	e12 = abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0, got ", orders.OrderBook)
	}
}

func TestGetOrderHistory(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}

	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 := abi.Pack("getOrderHistoryByPair", "ethsender1", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderHistory string
	}
	e12 := abi.Unpack(&orders, "getOrderHistoryByPair", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderHistory != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;2;0, got ", orders.OrderHistory)
	}
}

func TestGetOrderBookDuplicateTxID(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	_, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Now we get order list of eth - neo
	getOrderInput, e10 := abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderBook string
	}
	e12 := abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
	// Start matching 2 eth for 20 neo with old txid
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 = abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 = sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	e12 = abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	// Order book should return only the first order
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;1;0, got ", orders.OrderBook)
	}
}

func TestPartialMatching1(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	_, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	println("Matching 5 eth : ethtxid1")
	// Start matching 5 eth for 50 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(5))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Start matching 20 neo for 2 eth
	println("Matching 20 neo : neotxid1")
	originalNeoTxId := "neotxid1"
	matchInput1, e8 = abi.Pack("matchOrder", "NEO-ETH", "ETH-NEO", "neoSender2", "ethReceiver2", originalNeoTxId, big.NewInt(20))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e13 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e13 != nil {
		t.Fatal(e13)
	}

	// Get release info of newly added order, should have 1 release with 2 eth for NEO-ETH and 1 release with 20 neo for ETH-NEO
	getReleaseInput1, e14 := abi.Pack("getReleaseByTxId", originalNeoTxId, "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 := sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	var releases struct {
		ReleaseInfos string
	}
	e16 := abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;;20;0" {
		t.Error("Invalid release info, ethtxid1:ETH-NEO;neoReceiver1;;20;0 , got ", releases.ReleaseInfos)
	}
	println("Release info of ", originalNeoTxId, " from ETH to NEO :", releases.ReleaseInfos)
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", originalNeoTxId, "NEO-ETH")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}

	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "neotxid1:NEO-ETH;ethReceiver2;;2;0" {
		t.Error("Invalid release info, expect neotxid1:NEO-ETH;ethReceiver2;;2;0 , got ", releases.ReleaseInfos)
	}
	println("Release info of ", originalNeoTxId, " from NEO to ETH :", releases.ReleaseInfos)
	// get release info of 1st added order with direction neo-eth , should have 1 release  with 10 neo and completed to
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "ethtxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;;20;0" {
		t.Error("Invalid release info, expect ethtxid:ETH-NEO;neoReceiver1;;20;0 , got ", releases.ReleaseInfos)
	}

	// Match more 10 NEO to see what happens
	originalNeoTxId = "neotxid2"
	matchInput1, e8 = abi.Pack("matchOrder", "NEO-ETH", "ETH-NEO", "neoSender2", "ethReceiver2", originalNeoTxId, big.NewInt(10))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e13 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e13 != nil {
		t.Fatal(e13)
	}

	// We get release info of the 1st order from eth
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", originalEthTxId, "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}

	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	println("release info of ethtxid1:", releases.ReleaseInfos)
	//Complete ETH-NEO part of neotxid1
	completeInput, e17 := abi.Pack("completeOrder", "neotxid1", "releaseNeoTxId","ETH-NEO", "neoReceiver1", big.NewInt(20))
	if e17 != nil {
		t.Fatal(e17)
	}
	_, _, e18 := sample_kvm.Call(address, completeInput, &sample_kvm.Config{State: state})
	if e18 != nil {
		t.Fatal(e18)
	}
	// get release info of the order neotxid1 , should have 1 release with 20 neo and completed
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "neotxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	println(releases.ReleaseInfos)
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1" {
		t.Error("Invalid release info, expect ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1 , got ", releases.ReleaseInfos)
	}
	// get release info of 1st added order with direction neo-eth , should have 1 release  with 10 neo and completed to
	getReleaseInput1, e14 = abi.Pack("getReleaseByTxId", "ethtxid1", "ETH-NEO")
	if e14 != nil {
		t.Fatal(e14)
	}
	getReleaseResult1, _, e15 = sample_kvm.Call(address, getReleaseInput1, &sample_kvm.Config{State: state})
	if e15 != nil {
		t.Fatal(e15)
	}
	e16 = abi.Unpack(&releases, "getReleaseByTxId", getReleaseResult1)
	if e16 != nil {
		t.Fatal(e16)
	}
	if releases.ReleaseInfos != "ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1|ethtxid1:ETH-NEO;neoReceiver1;;10;0" {
		t.Error("Invalid release info, expect ethtxid1:ETH-NEO;neoReceiver1;releaseNeoTxId;20;1|ethtxid1:ETH-NEO;neoReceiver1;;10;0 , got ", releases.ReleaseInfos)
	}
}
