package smc

import (
	"math/big"
	"strings"
	"testing"

	"github.com/kardiachain/go-kardia/kai/state"
	kaidb "github.com/kardiachain/go-kardia/kai/storage"
	"github.com/kardiachain/go-kardia/kvm/sample_kvm"
	"github.com/kardiachain/go-kardia/lib/abi"
	"github.com/kardiachain/go-kardia/lib/common"
	"github.com/kardiachain/go-kardia/lib/log"
)

// This test contains all the test cases for interfaces of the new exchange contract
// Please find the solidity source code at go-kardia/kvm/smc/NewExchange.sol


var code = common.Hex2Bytes("")
var definition = `[
	{
		"constant": false,
		"inputs": [
			{
				"name": "orderID",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "completeOrder",
		"outputs": [
			{
				"name": "success",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "srcPair",
				"type": "string"
			},
			{
				"name": "destPair",
				"type": "string"
			},
			{
				"name": "srcAddress",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "originalTxId",
				"type": "string"
			},
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"name": "matchOrder",
		"outputs": [
			{
				"name": "",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderBook",
		"outputs": [
			{
				"name": "orderBook",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getAvailableAmountByPair",
		"outputs": [
			{
				"name": "amount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getMatchableAmount",
		"outputs": [
			{
				"name": "amounts",
				"type": "uint256[]"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "orderID",
				"type": "string"
			}
		],
		"name": "getMatchingOrderInfo",
		"outputs": [
			{
				"name": "matchedOrderID",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getRatePublic",
		"outputs": [
			{
				"name": "sale",
				"type": "uint256"
			},
			{
				"name": "receive",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": false,
		"inputs": [
			{
				"name": "pair",
				"type": "string"
			},
			{
				"name": "sale_amount",
				"type": "uint256"
			},
			{
				"name": "receiveAmount",
				"type": "uint256"
			}
		],
		"name": "addRate",
		"outputs": [],
		"payable": false,
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			},
			{
				"name": "pair",
				"type": "string"
			}
		],
		"name": "getOrderHistoryByPair",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "orderID",
				"type": "string"
			}
		],
		"name": "getUncompletedMatchingOrder",
		"outputs": [
			{
				"name": "matchedOrderID",
				"type": "string"
			},
			{
				"name": "destAddress",
				"type": "string"
			},
			{
				"name": "sendAmount",
				"type": "uint256"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"constant": true,
		"inputs": [
			{
				"name": "addr",
				"type": "string"
			}
		],
		"name": "getOrderHistory",
		"outputs": [
			{
				"name": "orderHistory",
				"type": "string"
			}
		],
		"payable": false,
		"stateMutability": "view",
		"type": "function"
	},
	{
		"anonymous": false,
		"inputs": [
			{
				"indexed": true,
				"name": "pair",
				"type": "string"
			},
			{
				"indexed": true,
				"name": "addr",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "matchOrderId",
				"type": "string"
			},
			{
				"indexed": false,
				"name": "_value",
				"type": "uint256"
			}
		],
		"name": "Release",
		"type": "event"
	}
]`

func TestNewExchangeContract(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}

	// Try to get non-set rate
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}
	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(0)) != 0 || rateStruct.Receive.Cmp(big.NewInt(0)) != 0 {
		t.Error("Error get value, expected 0, 0 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	var decodeInput struct {
		Pair          string
		Sale_amount   *big.Int
		ReceiveAmount *big.Int
	}
	setRateInput = common.FromHex("0x8e4a24040000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000074e454f2d45544800000000000000000000000000000000000000000000000000")
	e := abi.UnpackInput(&decodeInput, "addRate", setRateInput[4:])
	if e != nil {
		t.Fatal(e)
	}
	rateResult, _, errCallRate = sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})

	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	// Call get rate for ETH-NEO again to check if we set it correctly
	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e2 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 = sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}

	// Find available amount for NEO-ETH now, should be 0
	getAvailableInput, _ := abi.Pack("getAvailableAmountByPair", "NEO-ETH")
	availableResult, _, err := sample_kvm.Call(address, getAvailableInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(0)) != 0 {
		t.Fatal("Expect available input is 0, got", big.NewInt(0).SetBytes(availableResult).String())
	}
	// Get rate for NEO-ETH
	getRateInput2, e4 := abi.Pack("getRatePublic", "NEO-ETH")
	if e4 != nil {
		t.Fatal(e4)
	}
	rateResult, _, errCallRate = sample_kvm.Call(address, getRateInput2, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}

	err = abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if err != nil {
		t.Fatal(err)
	}

	if rateStruct.Sale.Cmp(big.NewInt(10)) != 0 || rateStruct.Receive.Cmp(big.NewInt(1)) != 0 {
		t.Error("Error get value, expected 10, 1 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}
	originalEthTxID := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e5 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxID, big.NewInt(1))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for recently added order
	getMatchingInput1, e5 := abi.Pack("getMatchingOrderInfo", originalEthTxID)
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, gas, e6 := sample_kvm.Call(address, getMatchingInput1, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var decodedMatchResult struct {
		MatchedOrderID 	 string `abi:"matchedOrderID"`
		DestAddress      string   `abi:"destAddress"`
		SendAmount       *big.Int `abi:"sendAmount"`
	}
	unpackErr := abi.Unpack(&decodedMatchResult, "getMatchingOrderInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedOrderID != "" {
		t.Error("Expect id 0, got ", decodedMatchResult.MatchedOrderID)
	}
	if decodedMatchResult.DestAddress != "" {
		t.Error("Expect address '', got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(0)) != 0 {
		t.Error("Expect send amount 0, got ", decodedMatchResult.SendAmount.String())
	}

	getAvailableInput, _ = abi.Pack("getAvailableAmountByPair", "ETH-NEO")
	availableResult, _, err = sample_kvm.Call(address, getAvailableInput, &sample_kvm.Config{State: state})
	if err != nil {
		t.Fatal(err)
	}

	if big.NewInt(0).SetBytes(availableResult).Cmp(big.NewInt(10)) != 0 {
		t.Fatal("Expect available input is 10, got", big.NewInt(0).SetBytes(availableResult).String())
	}

	originalNeoTxId := "originalNeoTxId"
	// Match request sell 10 NEO for 1 ETH
	matchInput2, e5 := abi.Pack("matchOrder", "NEO-ETH", "ETH-NEO", "neosender2", "ethReceiver2", originalNeoTxId, big.NewInt(10))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, _, e6 = sample_kvm.Call(address, matchInput2, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	// GetMatching info for 1st added order
	// now should return info of 2nd order
	getMatchingInput1, e5 = abi.Pack("getMatchingOrderInfo", originalEthTxID)
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = sample_kvm.Call(address, getMatchingInput1, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.Unpack(&decodedMatchResult, "getMatchingOrderInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedOrderID != originalNeoTxId {
		t.Error("Expect id  ", originalNeoTxId, " got ", decodedMatchResult.MatchedOrderID)
	}
	if decodedMatchResult.DestAddress != "ethReceiver2" {
		t.Error("Expect address ethReceiver2, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(1)) != 0 {
		t.Error("Expect send amount 1, got ", decodedMatchResult.SendAmount.String())
	}

	// GetMatching of NEO-ETH matching from NEO side (2nd order)
	// now should return info of 1st order from ETH -> NEO
	getMatchingInput2, e5 := abi.Pack("getMatchingOrderInfo", originalNeoTxId)
	if e5 != nil {
		t.Fatal(e5)
	}
	matchingResult1, _, e6 = sample_kvm.Call(address, getMatchingInput2, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}

	unpackErr = abi.Unpack(&decodedMatchResult, "getMatchingOrderInfo", matchingResult1)
	if unpackErr != nil {
		t.Fatal(unpackErr)
	}
	if decodedMatchResult.MatchedOrderID != originalEthTxID {
		t.Error("Expect id ", originalEthTxID, " got ", decodedMatchResult.MatchedOrderID)
	}
	if decodedMatchResult.DestAddress != "neoReceiver1" {
		t.Error("Expect address neoReceiver1, got ", decodedMatchResult.DestAddress)
	}
	if decodedMatchResult.SendAmount.Cmp(big.NewInt(10)) != 0 {
		t.Error("Expect send amount 10, got ", decodedMatchResult.SendAmount.String())
	}

	// complete order 1
	completeInput1, e7 := abi.Pack("completeOrder", originalEthTxID, "ETH-NEO")
	if (e7 != nil) {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 := sample_kvm.Call(address, completeInput1, &sample_kvm.Config{State: state})
	if (e8 != nil ) {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}

	// complete order 2
	completeInput1, e7 = abi.Pack("completeOrder", originalNeoTxId, "NEO-ETH")
	if (e7 != nil) {
		t.Fatal(e7)
	}
	completeResult1, gas, e8 = sample_kvm.Call(address, completeInput1, &sample_kvm.Config{State: state})
	if (e8 != nil ) {
		t.Fatal(e8)
	}
	if big.NewInt(0).SetBytes(completeResult1).Cmp(big.NewInt(1)) != 0 {
		t.Fatal("Complete order failed")
	}
	originalEthTxId2 := "ethtxid2"
	// Match 2 eth for 20 neo
	matchInput1, e5 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId2, big.NewInt(2))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	var matchableAmounts struct {
		Amounts		[]*big.Int	`abi:"amounts"`
	}
	// get matchable amount for NEO, should be 20 NEO
	getMatchAmountsInput, _ := abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 := sample_kvm.Call(address, getMatchAmountsInput, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.Unpack(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(10)) != 0 {
		t.Error("Expect 1st matchable amount to be 10, got ", matchableAmounts.Amounts[0].String())
	}
	originalEthTxId3 := "ethtxid3"
	// Match 3 other eth for 30 neo
	matchInput1, e5 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId3, big.NewInt(3))
	if e5 != nil {
		t.Fatal(e5)
	}
	_, gas, e6 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6, gas)
	}

	getMatchAmountsInput, _ = abi.Pack("getMatchableAmount", "ETH-NEO")
	matchAmountsResult, gas, e6 = sample_kvm.Call(address, getMatchAmountsInput, &sample_kvm.Config{State: state})
	if e6 != nil {
		t.Fatal(e6)
	}
	err = abi.Unpack(&matchableAmounts, "getMatchableAmount", matchAmountsResult)
	if len(matchableAmounts.Amounts) == 0 {
		t.Fatal("Invalid matchable amount")
	}
	
	if matchableAmounts.Amounts[0].Cmp(big.NewInt(10)) != 0 {
		t.Error("Expect 1st matchable amount to be 10, got ", matchableAmounts.Amounts[0].String())
	}
	if matchableAmounts.Amounts[1].Cmp(big.NewInt(20)) != 0 {
		t.Error("Expect 2nd matchable amount to be 20, got ", matchableAmounts.Amounts[1].String())
	}
	if matchableAmounts.Amounts[2].Cmp(big.NewInt(30)) != 0 {
		t.Error("Expect 3rd matchable amount to be 30, got ", matchableAmounts.Amounts[2].String())
	}
}

func TestGetOrderBook(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	// Now we get order list of eth - neo
	getOrderInput, e10 := abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderBook string
	}
	e12 := abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0" {
		t.Fatal("ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0, got ", orders.OrderBook)
	}
	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 = abi.Pack("getOrderBook", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 = sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	e12 = abi.Unpack(&orders, "getOrderBook", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderBook != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;;0, got ", orders.OrderBook)
	}
}

func TestGetOrderHistory(t *testing.T) {
	state, _ := state.New(log.New(), common.Hash{}, state.NewDatabase(kaidb.NewMemStore()))
	address := common.HexToAddress("0x0a")
	state.SetCode(address, code)
	abi, err := abi.JSON(strings.NewReader(definition))
	if err != nil {
		t.Fatal(err)
	}
	getRateInput, e1 := abi.Pack("getRatePublic", "ETH-NEO")
	if e1 != nil {
		t.Fatal(e1)
	}
	// Now we add rate for ETH-NEO first
	setRateInput, e2 := abi.Pack("addRate", "ETH-NEO", big.NewInt(1), big.NewInt(10))
	if e2 != nil {
		t.Fatal(e2)
	}
	_, _, e3 := sample_kvm.Call(address, setRateInput, &sample_kvm.Config{State: state})
	if e3 != nil {
		t.Fatal(e3)
	}
	rateResult, _, errCallRate := sample_kvm.Call(address, getRateInput, &sample_kvm.Config{State: state})
	if errCallRate != nil {
		t.Fatal(errCallRate)
	}
	var rateStruct struct {
		Sale    *big.Int `abi:"sale"`
		Receive *big.Int `abi:"receive"`
	}

	// Call get rate for ETH-NEO to check if we set it correctly
	e5 := abi.Unpack(&rateStruct, "getRatePublic", rateResult)
	if e5 != nil {
		t.Fatal(e5)
	}
	if rateStruct.Sale.Cmp(big.NewInt(1)) != 0 || rateStruct.Receive.Cmp(big.NewInt(10)) != 0 {
		t.Error("Error get value, expected 1, 10 got ", rateStruct.Sale.String(), rateStruct.Receive.String())
	}

	// Now we add rate for NEO-ETH to start matching orders
	setRateInput2, e6 := abi.Pack("addRate", "NEO-ETH", big.NewInt(10), big.NewInt(1))
	if e6 != nil {
		t.Fatal(e6)
	}
	_, _, e7 := sample_kvm.Call(address, setRateInput2, &sample_kvm.Config{State: state})
	if e7 != nil {
		t.Fatal(e7)
	}
	originalEthTxId := "ethtxid1"
	// Start matching 1 eth for 10 neo
	matchInput1, e8 := abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver1", originalEthTxId, big.NewInt(1))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 := sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}

	originalEthTxId2 := "ethtxid2"
	// Start matching 2 eth for 20 neo
	matchInput1, e8 = abi.Pack("matchOrder", "ETH-NEO", "NEO-ETH", "ethsender1", "neoReceiver2", originalEthTxId2, big.NewInt(2))
	if e8 != nil {
		t.Fatal(e8)
	}
	_, _, e9 = sample_kvm.Call(address, matchInput1, &sample_kvm.Config{State: state})
	if e9 != nil {
		t.Fatal(e9)
	}
	getOrderInput, e10 := abi.Pack("getOrderHistoryByPair", "ethsender1", "ETH-NEO")
	if e10 != nil {
		t.Fatal(e10)
	}
	orderBookResult,_, e11 := sample_kvm.Call(address, getOrderInput, &sample_kvm.Config{State: state})
	if e11 != nil {
		t.Fatal(e11)
	}
	var orders struct {
		OrderHistory string
	}
	e12 := abi.Unpack(&orders, "getOrderHistoryByPair", orderBookResult)
	if e12 != nil {
		t.Fatal(e12)
	}
	if orders.OrderHistory != "ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;;0" {
		t.Fatal("Expect ETH-NEO;ethsender1;neoReceiver1;ethtxid1;1;10;;0|ETH-NEO;ethsender1;neoReceiver2;ethtxid2;2;20;;0, got ", orders.OrderHistory)
	}
}
